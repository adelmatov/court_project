"""
QAMQOR Updater - –ê–ø–¥–µ–π—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º.
"""

import asyncio
import argparse
import signal
import sys
import random
from datetime import datetime, timedelta
from types import FrameType
from typing import Any, Dict, List, Optional
from contextlib import asynccontextmanager, suppress
from signal import Signals

from playwright.async_api import async_playwright, Page, Response

from .core import (
    Config,
    DatabaseManager,
    DataProcessor,
    APIValidator,
    WebClient,
    StealthTabManager,
    LogManager,
    apply_stealth
)

class QamqorUpdater:
    """–ê–ø–¥–µ–π—Ç–µ—Ä —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø–∞—Ä—Å–µ—Ä–∞."""
    
    def __init__(
        self, 
        force: bool = False, 
        statuses: Optional[List[str]] = None
    ) -> None:
        self.config = Config()
        self.log_manager = LogManager(self.config, name="qamqor_updater")
        self.logger = self.log_manager.logger
        
        self.db_manager = DatabaseManager(self.config, self.logger)
        self.data_processor = DataProcessor(self.config, self.logger)
        self.api_validator = APIValidator(self.logger)
        self.web_client = WebClient(self.config, self.logger, self.api_validator)
        
        self.force = force
        self.statuses = statuses or self.config.UPDATE_STATUSES
        
        self.update_queue: asyncio.Queue = asyncio.Queue()
        self.data_queue: asyncio.Queue = asyncio.Queue()
        self.shutdown_event = asyncio.Event()
        self.active_workers: List[asyncio.Task] = []
        
        self.stats = {
            'total_to_update': 0,
            'processed': 0,
            'updated': 0,
            'unchanged': 0,
            'not_found': 0,
            'errors': 0
        }
        
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum: Signals, frame: Optional[FrameType]) -> None:
        self.logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        self.shutdown_event.set()
    
    async def _graceful_shutdown(self, timeout: float = 30.0):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
        if not self.active_workers:
            return
        
        self.logger.warning(f"‚ö†Ô∏è Graceful shutdown: {len(self.active_workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤...")
        self.shutdown_event.set()
        
        try:
            await asyncio.wait_for(
                asyncio.gather(*self.active_workers, return_exceptions=True),
                timeout=timeout
            )
            self.logger.info("‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except asyncio.TimeoutError:
            self.logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç {timeout}s, –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á...")
            for task in self.active_workers:
                if not task.done():
                    task.cancel()
            await asyncio.gather(*self.active_workers, return_exceptions=True)
        finally:
            self.active_workers.clear()
    
    async def run(self) -> bool:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
        try:
            self.logger.info("=" * 80)
            self.logger.info("üîÑ –ó–ê–ü–£–°–ö –ê–ü–î–ï–ô–¢–ï–†–ê QAMQOR")
            self.logger.info("=" * 80)
            
            await self.db_manager.initialize_tables()
            
            records = await self.db_manager.get_records_to_update(
                statuses=self.statuses,
                force=self.force
            )
            
            total = len(records['tax']) + len(records['customs'])
            self.stats['total_to_update'] = total
            
            if total == 0:
                self.logger.info("‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return True
            
            self.logger.info("üìã –ó–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %d", total)
            
            await self._run_update_process(records)
            await self._print_update_summary()
            
            self.logger.info("=" * 80)
            self.logger.info("‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
            self.logger.info("=" * 80)
            return True
            
        except KeyboardInterrupt:
            self.logger.warning("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            return False
    
    async def _run_update_process(self, records: Dict[str, List[str]]):
        """–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        all_numbers = records['tax'] + records['customs']
        
        async with async_playwright() as playwright:
            self.logger.info("üîß –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            browser = await playwright.chromium.launch(
                headless=True,
                args=[
                    "--disable-blink-features=AutomationControlled",
                    "--disable-dev-shm-usage",
                    "--no-sandbox",
                    "--disable-gpu",
                    "--disable-software-rasterizer"
                ]
            )
            
            context = await browser.new_context(
                viewport={"width": 1920, "height": 1080},
                user_agent=(
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/120.0.0.0 Safari/537.36"
                ),
                locale="ru-RU,ru",
                timezone_id="Asia/Almaty",
                extra_http_headers={
                    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
                }
            )
            
            # Health check
            self.logger.info("üè• Health Check...")
            health_page = await context.new_page()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth
            await apply_stealth(health_page)
            
            try:
                await health_page.goto(
                    self.config.SEARCH_URL,
                    wait_until="domcontentloaded",
                    timeout=self.config.PAGE_TIMEOUT
                )
                
                await health_page.wait_for_selector(
                    'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]',
                    state="visible",
                    timeout=10000
                )
                
                if not await self.web_client.check_api_health_with_page(health_page):
                    self.logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                self.logger.info("‚úÖ Health Check –ø—Ä–æ–π–¥–µ–Ω")
                
            finally:
                await health_page.close()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TabManager —Å–æ stealth
            tab_manager = StealthTabManager(context, self.config, self.logger)
            await tab_manager.initialize()
            
            data_handler_task = asyncio.create_task(
                self._update_data_handler(),
                name="update_data_handler"
            )
            
            for reg_num in all_numbers:
                await self.update_queue.put(reg_num)
            
            self.active_workers = [
                asyncio.create_task(
                    self._update_worker(worker_id, tab_manager),
                    name=f"update_worker_{worker_id}"
                )
                for worker_id in range(self.config.MAX_CONCURRENT_TABS)
            ]
            
            self.logger.info("üë∑ –ó–∞–ø—É—â–µ–Ω–æ %d –≤–æ—Ä–∫–µ—Ä–æ–≤", len(self.active_workers))
            
            try:
                await asyncio.gather(*self.active_workers, return_exceptions=True)
                
                if self.shutdown_event.is_set():
                    await self._graceful_shutdown(timeout=30.0)
                    
            except KeyboardInterrupt:
                await self._graceful_shutdown(timeout=30.0)
                
            finally:
                try:
                    self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ data handler...")
                    await self.data_queue.put(None)
                    await asyncio.wait_for(data_handler_task, timeout=15.0)
                    self.logger.info("‚úÖ Data handler –∑–∞–≤–µ—Ä—à–µ–Ω")
                except asyncio.TimeoutError:
                    self.logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç data_handler (15s)")
                    data_handler_task.cancel()
                    try:
                        await data_handler_task
                    except asyncio.CancelledError:
                        pass
                
                await tab_manager.close_all()
                await browser.close()
                self.logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    
    async def _update_worker(
        self, 
        worker_id: int, 
        tab_manager: StealthTabManager
    ) -> None:
        """–í–æ—Ä–∫–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        self.logger.debug(f"‚úÖ UW{worker_id} –∑–∞–ø—É—â–µ–Ω")
        
        async with tab_manager.get_tab() as page:
            await page.goto(
                self.config.SEARCH_URL,
                wait_until="domcontentloaded",
                timeout=self.config.PAGE_TIMEOUT
            )
            
            await page.wait_for_selector(
                'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]',
                state="visible",
                timeout=10000
            )
            
            while not self.shutdown_event.is_set():
                try:
                    reg_num = await asyncio.wait_for(
                        self.update_queue.get(),
                        timeout=1.0
                    )
                except asyncio.TimeoutError:
                    if self.update_queue.empty():
                        break
                    continue
                except asyncio.CancelledError:
                    break
                
                try:
                    result = await self._fetch_record_data(page, reg_num, worker_id)
                    if result:
                        await self.data_queue.put({'type': 'data', 'data': result})
                        self.stats['processed'] += 1
                    else:
                        self.stats['not_found'] += 1
                except Exception as e:
                    self.stats['errors'] += 1
                    self.logger.error("‚ùå UW%d | %s: %s", worker_id, reg_num, e)
                finally:
                    self.update_queue.task_done()
        
        self.logger.debug(f"‚úÖ UW{worker_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def _fetch_record_data(
        self,
        page: Page,
        registration_number: str,
        worker_id: int
    ) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏."""
        self.log_manager.increment_metric('api_requests')
        
        for attempt in range(1, self.config.MAX_RETRIES + 1):
            try:
                if self.shutdown_event.is_set():
                    return None
                
                await page.wait_for_selector(
                    'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]',
                    state="visible",
                    timeout=5000
                )
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
                await asyncio.sleep(
                    random.uniform(self.config.NATURAL_DELAY_MIN, self.config.NATURAL_DELAY_MAX)
                )

                await page.fill('input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]', '')
                await page.fill('input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]', registration_number)

                await asyncio.sleep(
                    random.uniform(self.config.TYPING_DELAY_MIN, self.config.TYPING_DELAY_MAX)
                )
                
                async with self._response_listener(page) as wait_response:
                    await page.click("button.btn.btn-primary:has-text('–Ü–∑–¥–µ—É')")
                    response_data = await wait_response()
                
                if not response_data:
                    if attempt < self.config.MAX_RETRIES:
                        await asyncio.sleep(self.config.RETRY_DELAY)
                        continue
                    return None
                
                is_valid, error_msg = self.api_validator.validate_response(
                    response_data,
                    context=f"UW{worker_id}:{registration_number}"
                )
                
                if not is_valid:
                    if self.api_validator.is_critical_error(response_data):
                        self.logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê API: {error_msg}")
                        self.shutdown_event.set()
                        return None
                    if attempt < self.config.MAX_RETRIES:
                        await asyncio.sleep(self.config.RETRY_DELAY)
                        continue
                    return None
                
                if response_data.get("data", {}).get("totalElements", 0) == 0:
                    return None
                
                processed = self.data_processor.process_api_response(response_data)
                if processed:
                    self.log_manager.increment_metric('records_processed')
                return processed
                
            except asyncio.TimeoutError:
                if attempt < self.config.MAX_RETRIES:
                    await asyncio.sleep(self.config.RETRY_DELAY * attempt)
                else:
                    self.log_manager.increment_metric('api_errors')
                    return None
            except Exception as e:
                if self.shutdown_event.is_set():
                    return None
                if attempt < self.config.MAX_RETRIES:
                    await asyncio.sleep(self.config.RETRY_DELAY * attempt)
                else:
                    self.log_manager.increment_metric('api_errors')
                    return None
        
        return None
    
    @asynccontextmanager
    async def _response_listener(self, page: Page):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        response_future: asyncio.Future[Dict] = asyncio.Future()
        
        async def handle_response(response: Response):
            try:
                if self.config.API_ENDPOINT in response.url and not response_future.done():
                    json_data = await response.json()
                    response_future.set_result(json_data)
            except Exception as e:
                if not response_future.done():
                    response_future.set_exception(e)
        
        page.on("response", handle_response)
        
        async def wait_response():
            try:
                return await asyncio.wait_for(
                    response_future,
                    timeout=self.config.RESPONSE_TIMEOUT
                )
            except:
                return None
        
        try:
            yield wait_response
        finally:
            with suppress(Exception):
                page.remove_listener("response", handle_response)
    
    async def _update_data_handler(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        batch = []
        last_save_time = asyncio.get_event_loop().time()
        save_interval = 5.0
        total_saved = 0
        
        self.logger.info(f"üíæ Update data handler –∑–∞–ø—É—â–µ–Ω (–±–∞—Ç—á={self.config.UPDATE_BATCH_SIZE})")
        
        while True:
            try:
                current_time = asyncio.get_event_loop().time()
                timeout = max(0.5, save_interval - (current_time - last_save_time))
                
                item = await asyncio.wait_for(self.data_queue.get(), timeout=timeout)
                
                if item is None:
                    self.logger.info("üõë –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è update data handler")
                    break
                
                if isinstance(item, dict) and item.get('type') == 'data':
                    batch.append(item['data'])
                
                current_time = asyncio.get_event_loop().time()
                should_save = (
                    len(batch) >= self.config.UPDATE_BATCH_SIZE or
                    (current_time - last_save_time) >= save_interval
                )
                
                if should_save and batch:
                    try:
                        tax, customs, changes = await self.db_manager.bulk_update_data(batch, silent=True)
                        total = tax + customs
                        self.stats['updated'] += total
                        self.stats['unchanged'] += len(batch) - total
                        total_saved += total
                        
                        self.log_manager.increment_metric('db_updates', total)
                        
                        if total > 0:
                            self.logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: TAX=%d, CUSTOMS=%d, –≤—Å–µ–≥–æ=%d", tax, customs, total_saved)
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    
                    batch.clear()
                    last_save_time = asyncio.get_event_loop().time()
                    
            except asyncio.TimeoutError:
                if batch:
                    try:
                        tax, customs, changes = await self.db_manager.bulk_update_data(batch, silent=True)
                        total = tax + customs
                        self.stats['updated'] += total
                        self.stats['unchanged'] += len(batch) - total
                        total_saved += total
                        
                        self.log_manager.increment_metric('db_updates', total)
                        
                        if total > 0:
                            self.logger.info(f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: TAX={tax}, CUSTOMS={customs}")
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    
                    batch.clear()
                    last_save_time = asyncio.get_event_loop().time()
            
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ update data handler: {e}", exc_info=True)
                if batch:
                    try:
                        tax, customs, changes = await self.db_manager.bulk_update_data(batch, silent=False)
                        self.logger.info(f"üíæ –ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {len(batch)} –∑–∞–ø–∏—Å–µ–π")
                    except Exception:
                        self.logger.critical(f"üö® –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•: {len(batch)} –∑–∞–ø–∏—Å–µ–π")
                    batch.clear()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if batch:
            try:
                tax, customs, changes = await self.db_manager.bulk_update_data(batch, silent=False)
                total = tax + customs
                total_saved += total
                self.stats['updated'] += total
                self.stats['unchanged'] += len(batch) - total
                self.logger.info(f"üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: TAX={tax}, CUSTOMS={customs}")
            except Exception as e:
                self.logger.critical(f"üö® –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•: {len(batch)} –∑–∞–ø–∏—Å–µ–π: {e}")
        
        self.logger.info(f"‚úÖ Update data handler –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_saved}")
    
    async def _print_update_summary(self) -> None:
        """–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
        self.logger.info("")
        self.logger.info("=" * 80)
        self.logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
        self.logger.info("=" * 80)
        self.logger.info(f"üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {self.stats['total_to_update']}")
        self.logger.info(f"   ‚îú‚îÄ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed']}")
        self.logger.info(f"   ‚îú‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.stats['updated']}")
        self.logger.info(f"   ‚îú‚îÄ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {self.stats['unchanged']}")
        self.logger.info(f"   ‚îú‚îÄ –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {self.stats['not_found']}")
        self.logger.info(f"   ‚îî‚îÄ –û—à–∏–±–æ–∫: {self.stats['errors']}")
        self.logger.info("=" * 80)
        
        metrics = self.log_manager.get_metrics_summary()
        self.logger.info("")
        self.logger.info("üìà –ú–ï–¢–†–ò–ö–ò:")
        self.logger.info(f"   ‚îî‚îÄ –í—Ä–µ–º—è: {metrics['elapsed_seconds']}s")
        self.logger.info(f"   ‚îî‚îÄ API –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['api_requests']}")
        self.logger.info(f"   ‚îî‚îÄ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics['records_processed']}")
        self.logger.info(f"   ‚îî‚îÄ –°–∫–æ—Ä–æ—Å—Ç—å: {metrics['records_per_second']} –∑–∞–ø/—Å")


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
    parser = argparse.ArgumentParser(description='–ê–ø–¥–µ–π—Ç–µ—Ä QAMQOR')
    parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö')
    parser.add_argument('--status', type=str, help='–°—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
    return parser.parse_args()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    args = parse_arguments()
    statuses = [s.strip() for s in args.status.split(',')] if args.status else None
    updater = QamqorUpdater(force=args.force, statuses=statuses)
    success = await updater.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)