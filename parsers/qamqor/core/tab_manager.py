"""–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ –≤–∫–ª–∞–¥–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞."""

import asyncio
import logging
from contextlib import asynccontextmanager
from typing import List

from playwright.async_api import BrowserContext, Page

from .config import Config


class TabManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ –≤–∫–ª–∞–¥–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞."""
    
    def __init__(self, context: BrowserContext, config: Config, logger: logging.Logger):
        self.context = context
        self.config = config
        self.logger = logger
        self.available_tabs: asyncio.Queue[Page] = asyncio.Queue()
        self.all_tabs: List[Page] = []
        self._lock = asyncio.Lock()
        self._closed = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –≤–∫–ª–∞–¥–æ–∫."""
        self.logger.debug(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {self.config.MAX_CONCURRENT_TABS} –≤–∫–ª–∞–¥–æ–∫...")
        
        for i in range(self.config.MAX_CONCURRENT_TABS):
            try:
                page = await self._create_configured_page()
                self.all_tabs.append(page)
                await self.available_tabs.put(page)
                self.logger.debug(f"‚úÖ –í–∫–ª–∞–¥–∫–∞ {i+1}/{self.config.MAX_CONCURRENT_TABS} —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É {i+1}: {e}")
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
                await self.close_all()
                raise
        
        self.logger.debug("‚úÖ –ü—É–ª –≤–∫–ª–∞–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _create_configured_page(self) -> Page:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ª–∏—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
        
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        """
        page = await self.context.new_page()
        
        # ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        blocked_types = {"image", "stylesheet", "font", "media"}
        
        async def route_handler(route):
            """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
            try:
                if route.request.resource_type in blocked_types:
                    await route.abort()
                else:
                    await route.continue_()
            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
                try:
                    await route.abort()
                except Exception:
                    pass
        
        await page.route("**/*", route_handler)
        
        return page
    
    @asynccontextmanager
    async def get_tab(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º."""
        if self._closed:
            raise RuntimeError("TabManager —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
        
        page = await self.available_tabs.get()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥ –æ–¥–Ω–∏–º lock'–æ–º
        if page.is_closed():
            async with self._lock:
                # ‚úÖ Double-check –ø–æ–¥ lock'–æ–º
                if page.is_closed():
                    self.logger.warning("‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
                    try:
                        new_page = await self._create_configured_page()
                        
                        # ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                        try:
                            idx = self.all_tabs.index(page)
                            self.all_tabs[idx] = new_page
                        except ValueError:
                            # –°—Ç–∞—Ä–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                            self.all_tabs.append(new_page)
                        
                        page = new_page
                        
                    except Exception as e:
                        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É: {e}")
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ-—Ç–æ –≤ –ø—É–ª, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                        await self.available_tabs.put(page)
                        raise
        
        try:
            yield page
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≤–∫–ª–∞–¥–∫–æ–π: {e}")
            
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
            async with self._lock:
                try:
                    if not page.is_closed():
                        await page.close()
                except Exception:
                    pass
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ–Ω—É
                try:
                    page = await self._create_configured_page()
                    self.logger.info("‚úÖ –í–∫–ª–∞–¥–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                except Exception as create_error:
                    self.logger.critical(f"üö® –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É: {create_error}")
                    try:
                        page = await self.context.new_page()
                    except Exception:
                        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É") from create_error
            
            raise
            
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≤ –ø—É–ª
            if not page.is_closed():
                await self.available_tabs.put(page)
            else:
                # ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞
                asyncio.create_task(self._restore_pool_tab(page))

    async def _restore_pool_tab(self, closed_page: Page):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –ø—É–ª–µ."""
        async with self._lock:
            try:
                new_page = await self._create_configured_page()
                await self.available_tabs.put(new_page)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                try:
                    idx = self.all_tabs.index(closed_page)
                    self.all_tabs[idx] = new_page
                except ValueError:
                    self.all_tabs.append(new_page)
                    
            except Exception as e:
                self.logger.critical(f"üö® –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É–ª –≤–∫–ª–∞–¥–æ–∫: {e}")
    
    async def close_all(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫."""
        self._closed = True
        
        self.logger.debug("üîß –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫...")
        
        async with self._lock:
            for i, page in enumerate(self.all_tabs):
                try:
                    if not page.is_closed():
                        await page.close()
                        self.logger.debug(f"‚úÖ –í–∫–ª–∞–¥–∫–∞ {i+1} –∑–∞–∫—Ä—ã—Ç–∞")
                except Exception as e:
                    self.logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏ {i+1}: {e}")
        
        self.logger.debug("‚úÖ –í—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")