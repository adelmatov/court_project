"""–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""

import asyncio
import logging
from typing import Optional

from playwright.async_api import Page, Response

from .config import Config
from .api_validator import APIValidator


class WebClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    
    def __init__(self, config: Config, logger: logging.Logger, validator: APIValidator):
        self.config = config
        self.logger = logger
        self.validator = validator
    
    async def check_api_health_with_page(self, page: Page) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–∏.
        
        Args:
            page: –í–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
            
            test_number = self.config.TEST_NUMBER
            response_future: asyncio.Future[Response] = asyncio.Future()
            
            def handle_response(response: Response):
                """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞."""
                if self.config.API_ENDPOINT in response.url:
                    if not response_future.done():
                        response_future.set_result(response)
            
            page.on("response", handle_response)
            
            try:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ
                await page.fill(
                    'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]', 
                    test_number
                )
                
                # –ö–ª–∏–∫–∞–µ–º
                await page.click("button.btn.btn-primary:has-text('–Ü–∑–¥–µ—É')")
                
                # –ñ–¥–µ–º Response –æ–±—ä–µ–∫—Ç
                response = await asyncio.wait_for(
                    response_future,
                    timeout=self.config.RESPONSE_TIMEOUT
                )
                
                # –ü–∞—Ä—Å–∏–º JSON –≤–Ω–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                response_data = await response.json()
                
                if not response_data:
                    self.logger.error("‚ùå API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
                    return False
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                is_valid, error_msg = self.validator.validate_response(
                    response_data, 
                    context="–ü—Ä–æ–≤–µ—Ä–∫–∞ API"
                )
                
                if not is_valid:
                    self.logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {error_msg}")
                    self.logger.debug(f"   –û—Ç–≤–µ—Ç: {response_data}")
                    return False
                
                self.logger.info("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
                
            finally:
                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                try:
                    page.remove_listener("response", handle_response)
                except Exception:
                    pass
                
        except asyncio.TimeoutError:
            self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ API")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}", exc_info=True)
            return False