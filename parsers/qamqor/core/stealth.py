"""
Stealth utilities –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞.
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from typing import List, Set

from playwright.async_api import BrowserContext, Page, Route

from .config import Config


async def apply_stealth(page: Page) -> bool:
    """
    –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (webdriver —Ñ–ª–∞–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç chrome –æ–±—ä–µ–∫—Ç,
    –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç permissions, plugins –∏ languages).
    
    Args:
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è stealth
        
    Returns:
        True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        await page.add_init_script("""
            // –£–¥–∞–ª—è–µ–º webdriver
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined
            });
            
            // Chrome –æ–±—ä–µ–∫—Ç
            window.navigator.chrome = {
                runtime: {},
                loadTimes: function() {},
                csi: function() {}
            };
            
            // Permissions
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                    Promise.resolve({ state: Notification.permission }) :
                    originalQuery(parameters)
            );
            
            // Plugins
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5]
            });
            
            // Languages
            Object.defineProperty(navigator, 'languages', {
                get: () => ['ru-RU', 'ru', 'en-US', 'en']
            });
        """)
        return True
    except Exception:
        return False


class StealthTabManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ –≤–∫–ª–∞–¥–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º stealth.
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É–ª–æ–º –≤–∫–ª–∞–¥–æ–∫ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,
    —Å—Ç–∏–ª–∏, —à—Ä–∏—Ñ—Ç—ã) –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏ —Å–±–æ—è—Ö.
    """
    
    # –¢–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    BLOCKED_RESOURCE_TYPES: Set[str] = {"image", "stylesheet", "font", "media"}
    
    def __init__(
        self,
        context: BrowserContext,
        config: Config,
        logger: logging.Logger
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∫–ª–∞–¥–æ–∫.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ Playwright
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
            logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.context = context
        self.config = config
        self.logger = logger
        self.available_tabs: asyncio.Queue[Page] = asyncio.Queue()
        self.all_tabs: List[Page] = []
        self._lock = asyncio.Lock()
        self._closed = False
    
    async def initialize(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –≤–∫–ª–∞–¥–æ–∫.
        
        –°–æ–∑–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫–ª–∞–¥–æ–∫,
        –ø—Ä–∏–º–µ–Ω—è–µ—Ç stealth –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –∫ –∫–∞–∂–¥–æ–π.
        
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        """
        self.logger.debug(
            "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è %d –≤–∫–ª–∞–¥–æ–∫...",
            self.config.MAX_CONCURRENT_TABS
        )
        
        for i in range(self.config.MAX_CONCURRENT_TABS):
            try:
                page = await self._create_configured_page()
                await apply_stealth(page)
                
                self.all_tabs.append(page)
                await self.available_tabs.put(page)
                
                self.logger.debug("‚úÖ –í–∫–ª–∞–¥–∫–∞ %d (stealth) —Å–æ–∑–¥–∞–Ω–∞", i + 1)
            except Exception as e:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ %d: %s", i + 1, e)
                await self.close_all()
                raise
        
        self.logger.debug("‚úÖ –ü—É–ª –≤–∫–ª–∞–¥–æ–∫ (stealth) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _create_configured_page(self) -> Page:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤.
        
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ Playwright
        """
        page = await self.context.new_page()
        
        async def route_handler(route: Route) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤."""
            try:
                if route.request.resource_type in self.BLOCKED_RESOURCE_TYPES:
                    await route.abort()
                else:
                    await route.continue_()
            except Exception:
                try:
                    await route.abort()
                except Exception:
                    pass
        
        await page.route("**/*", route_handler)
        return page
    
    @asynccontextmanager
    async def get_tab(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏–∑ –ø—É–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        –≤–∫–ª–∞–¥–∫–∏ –≤ –ø—É–ª. –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é.
        
        Yields:
            Page: –í–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            
        Raises:
            RuntimeError: –ï—Å–ª–∏ TabManager —É–∂–µ –∑–∞–∫—Ä—ã—Ç
        """
        if self._closed:
            raise RuntimeError("TabManager –∑–∞–∫—Ä—ã—Ç")
        
        page = await self.available_tabs.get()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
        if page.is_closed():
            async with self._lock:
                # Double-check –ø–æ–¥ lock'–æ–º
                if page.is_closed():
                    self.logger.warning("‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
                    try:
                        new_page = await self._create_configured_page()
                        await apply_stealth(new_page)
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                        try:
                            idx = self.all_tabs.index(page)
                            self.all_tabs[idx] = new_page
                        except ValueError:
                            self.all_tabs.append(new_page)
                        
                        page = new_page
                    except Exception as e:
                        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É: %s", e)
                        await self.available_tabs.put(page)
                        raise
        
        try:
            yield page
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≤–∫–ª–∞–¥–∫–æ–π: %s", e)
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            async with self._lock:
                try:
                    if not page.is_closed():
                        await page.close()
                except Exception:
                    pass
                
                try:
                    page = await self._create_configured_page()
                    await apply_stealth(page)
                    self.logger.info("‚úÖ –í–∫–ª–∞–¥–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                except Exception as create_error:
                    self.logger.critical(
                        "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É: %s",
                        create_error
                    )
                    raise
            raise
        finally:
            # –í–æ–∑–≤—Ä–∞—Ç –≤–∫–ª–∞–¥–∫–∏ –≤ –ø—É–ª
            if not page.is_closed():
                await self.available_tabs.put(page)
            else:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                asyncio.create_task(self._restore_pool_tab(page))
    
    async def _restore_pool_tab(self, closed_page: Page) -> None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –ø—É–ª–µ.
        
        Args:
            closed_page: –ó–∞–∫—Ä—ã—Ç–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
        """
        async with self._lock:
            try:
                new_page = await self._create_configured_page()
                await apply_stealth(new_page)
                await self.available_tabs.put(new_page)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                try:
                    idx = self.all_tabs.index(closed_page)
                    self.all_tabs[idx] = new_page
                except ValueError:
                    self.all_tabs.append(new_page)
            except Exception as e:
                self.logger.critical("üö® –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É–ª: %s", e)
    
    async def close_all(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –≤ –ø—É–ª–µ."""
        self._closed = True
        
        async with self._lock:
            for i, page in enumerate(self.all_tabs):
                try:
                    if not page.is_closed():
                        await page.close()
                except Exception:
                    pass