"""
QAMQOR Parser - –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä —Å –æ–±—Ö–æ–¥–æ–º reCAPTCHA –∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å stealth-—Ä–µ–∂–∏–º–æ–º –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π.
"""

import asyncio
import argparse
import signal
import sys
import random
from types import FrameType
from typing import Any, Dict, List, Optional, Tuple
from contextlib import asynccontextmanager, suppress
from signal import Signals
from datetime import datetime

from playwright.async_api import async_playwright, Page, Response

from .core import (
    Config,
    DatabaseManager,
    DataProcessor,
    APIValidator,
    WebClient,
    StealthTabManager,
    LogManager,
    apply_stealth
)

class QamqorParser:
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä QAMQOR —Å –æ–±—Ö–æ–¥–æ–º CAPTCHA –∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏."""
    
    def __init__(self, mode: str = "full") -> None:
        self.config = Config()
        self.config.MODE = mode
        
        self.log_manager = LogManager(self.config, name="qamqor_parser")
        self.logger = self.log_manager.logger
        
        self.db_manager = DatabaseManager(self.config, self.logger)
        self.data_processor = DataProcessor(self.config, self.logger)
        self.api_validator = APIValidator(self.logger)
        self.web_client = WebClient(self.config, self.logger, self.api_validator)
        
        self.data_queue: asyncio.Queue = asyncio.Queue()
        self.shutdown_event = asyncio.Event()
        self.active_workers: List[asyncio.Task] = []
        
        self.region_stats: Dict = {}
        
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum: Signals, frame: Optional[FrameType]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        self.logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.shutdown_event.set()
    
    async def _graceful_shutdown(self, timeout: float = 30.0):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."""
        if not self.active_workers:
            return
        
        self.logger.warning(f"‚ö†Ô∏è Graceful shutdown: {len(self.active_workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤...")
        self.shutdown_event.set()
        
        try:
            await asyncio.wait_for(
                asyncio.gather(*self.active_workers, return_exceptions=True),
                timeout=timeout
            )
            self.logger.info("‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except asyncio.TimeoutError:
            self.logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç {timeout}s, –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á...")
            for task in self.active_workers:
                if not task.done():
                    task.cancel()
            await asyncio.gather(*self.active_workers, return_exceptions=True)
        finally:
            self.active_workers.clear()
    
    async def run(self) -> bool:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞."""
        try:
            self.logger.info("=" * 80)
            self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê QAMQOR | –†–µ–∂–∏–º: %s", self.config.MODE.upper())
            self.logger.info("=" * 80)
            
            await self.db_manager.initialize_tables()
            self.region_stats = await self.db_manager.get_region_stats()
            
            if self.config.MODE == "missing_only":
                self.logger.info("üîç –†–µ–∂–∏–º: –¢–û–õ–¨–ö–û –ü–†–û–ü–£–©–ï–ù–ù–´–ï –ù–û–ú–ï–†–ê")
                await self._run_missing_numbers_search()
            else:
                region_state = await self.db_manager.get_region_state()
                self.logger.info("üì° –†–µ–∂–∏–º: –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì")
                await self._run_parsing(region_state)
                
                if not self.shutdown_event.is_set():
                    self.logger.info("")
                    self.logger.info("=" * 80)
                    self.logger.info("üîç –§–ê–ó–ê 2: –ü–û–ò–°–ö –ü–†–û–ü–£–©–ï–ù–ù–´–• –ù–û–ú–ï–†–û–í")
                    self.logger.info("=" * 80)
                    await self._run_missing_numbers_search()
            
            await self._print_final_table()
            
            self.logger.info("=" * 80)
            self.logger.info("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
            self.logger.info("=" * 80)
            return True
            
        except KeyboardInterrupt:
            self.logger.warning("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            return False
    
    async def _run_parsing(self, region_state: Dict[int, int]):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        async with async_playwright() as playwright:
            self.logger.info("üîß –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            browser = await playwright.chromium.launch(
                headless=True,
                args=[
                    "--disable-blink-features=AutomationControlled",
                    "--disable-dev-shm-usage",
                    "--no-sandbox",
                    "--disable-setuid-sandbox",
                    "--disable-gpu",
                    "--disable-software-rasterizer",
                    "--disable-extensions",
                    "--disable-background-networking",
                    "--disable-background-timer-throttling",
                    "--disable-backgrounding-occluded-windows",
                    "--disable-breakpad",
                    "--disable-component-extensions-with-background-pages",
                    "--disable-features=TranslateUI,BlinkGenPropertyTrees",
                    "--disable-ipc-flooding-protection",
                    "--disable-renderer-backgrounding",
                    "--enable-features=NetworkService,NetworkServiceInProcess",
                    "--force-color-profile=srgb",
                    "--hide-scrollbars",
                    "--metrics-recording-only",
                    "--mute-audio",
                    "--no-first-run",
                    "--disable-infobars",
                    "--window-size=1920,1080"
                ]
            )
            
            self.logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            context = await browser.new_context(
                viewport={"width": 1920, "height": 1080},
                user_agent=(
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/120.0.0.0 Safari/537.36"
                ),
                locale="ru-RU,ru",
                timezone_id="Asia/Almaty",
                geolocation={"longitude": 76.8512, "latitude": 43.2220},
                permissions=["geolocation"],
                color_scheme="light",
                device_scale_factor=1,
                has_touch=False,
                is_mobile=False,
                extra_http_headers={
                    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
                    "Accept-Encoding": "gzip, deflate, br",
                    "DNT": "1",
                    "Connection": "keep-alive",
                    "Upgrade-Insecure-Requests": "1",
                    "Sec-Fetch-Dest": "document",
                    "Sec-Fetch-Mode": "navigate",
                    "Sec-Fetch-Site": "none",
                    "Sec-Fetch-User": "?1"
                }
            )
            
            # Health check
            self.logger.info("üè• –ó–∞–ø—É—Å–∫ Health Check...")
            health_check_page = await context.new_page()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth
            await apply_stealth(health_check_page)
            
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            async def health_route_handler(route):
                if route.request.resource_type in ["image", "stylesheet", "font", "media"]:
                    await route.abort()
                else:
                    await route.continue_()
            
            await health_check_page.route("**/*", health_route_handler)
            
            try:
                self.logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {self.config.SEARCH_URL}")
                
                await health_check_page.goto(
                    self.config.SEARCH_URL,
                    timeout=self.config.PAGE_TIMEOUT,
                    wait_until="domcontentloaded"
                )
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—è –≤–≤–æ–¥–∞
                await health_check_page.wait_for_selector(
                    'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]',
                    state="visible",
                    timeout=10000
                )
                
                self.logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
                if not await self.web_client.check_api_health_with_page(health_check_page):
                    self.logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                self.logger.info("‚úÖ Health Check –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check: {e}", exc_info=True)
                return
                
            finally:
                await health_check_page.close()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TabManager
            self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TabManager...")
            tab_manager = StealthTabManager(context, self.config, self.logger)
            await tab_manager.initialize()
            
            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data_handler_task = asyncio.create_task(
                self._data_handler(),
                name="data_handler"
            )
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
            region_queue: asyncio.Queue = asyncio.Queue()
            for region_code, start_pos in region_state.items():
                region_name = self.config.REGIONS[region_code]
                await region_queue.put((region_code, region_name, start_pos))
            
            self.logger.info("üìã –í –æ—á–µ—Ä–µ–¥–∏ %d —Ä–µ–≥–∏–æ–Ω–æ–≤", len(self.config.REGIONS))
            
            # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
            self.active_workers = [
                asyncio.create_task(
                    self._region_worker(worker_id, region_queue, tab_manager),
                    name=f"region_worker_{worker_id}"
                )
                for worker_id in range(self.config.MAX_CONCURRENT_TABS)
            ]
            
            self.logger.info("üë∑ –ó–∞–ø—É—â–µ–Ω–æ %d –≤–æ—Ä–∫–µ—Ä–æ–≤", len(self.active_workers))
            
            try:
                await asyncio.gather(*self.active_workers, return_exceptions=True)
                
                if self.shutdown_event.is_set():
                    await self._graceful_shutdown(timeout=30.0)
            
            except KeyboardInterrupt:
                self.logger.warning("‚ö†Ô∏è KeyboardInterrupt - graceful shutdown...")
                await self._graceful_shutdown(timeout=30.0)
            
            finally:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                try:
                    self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                    await self.data_queue.put(None)
                    await asyncio.wait_for(data_handler_task, timeout=15.0)
                    self.logger.info("‚úÖ Data handler –∑–∞–≤–µ—Ä—à–µ–Ω")
                except asyncio.TimeoutError:
                    self.logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç data_handler (15s)")
                    data_handler_task.cancel()
                    try:
                        await data_handler_task
                    except asyncio.CancelledError:
                        pass
                
                # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
                await tab_manager.close_all()
                await browser.close()
                self.logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    
    async def _run_missing_numbers_search(self):
        """–ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤."""
        missing_numbers = await self.db_manager.find_missing_numbers()
        
        if not missing_numbers:
            self.logger.info("‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        total_missing = sum(len(nums) for nums in missing_numbers.values())
        self.logger.info("üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: %d", total_missing)
        
        async with async_playwright() as playwright:
            browser = await playwright.chromium.launch(
                headless=True,
                args=["--disable-dev-shm-usage", "--no-sandbox", "--disable-gpu"]
            )
            
            context = await browser.new_context(
                viewport={"width": 1920, "height": 1080},
                user_agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36"
            )
            
            tab_manager = StealthTabManager(context, self.config, self.logger)
            await tab_manager.initialize()
            
            data_handler_task = asyncio.create_task(
                self._data_handler(),
                name="missing_data_handler"
            )
            
            missing_queue: asyncio.Queue = asyncio.Queue()
            for region_code, numbers in missing_numbers.items():
                region_name = self.config.REGIONS[region_code]
                await missing_queue.put((region_code, region_name, numbers))
            
            self.active_workers = [
                asyncio.create_task(
                    self._missing_numbers_worker(worker_id, missing_queue, tab_manager),
                    name=f"missing_worker_{worker_id}"
                )
                for worker_id in range(self.config.MAX_CONCURRENT_TABS)
            ]
            
            try:
                await asyncio.gather(*self.active_workers, return_exceptions=True)
            finally:
                try:
                    await self.data_queue.put(None)
                    await asyncio.wait_for(data_handler_task, timeout=15.0)
                except asyncio.TimeoutError:
                    data_handler_task.cancel()
                
                await tab_manager.close_all()
                await browser.close()
    
    async def _region_worker(
        self,
        worker_id: int,
        region_queue: asyncio.Queue[Tuple[int, str, int]],
        tab_manager: StealthTabManager
    ) -> None:
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞."""
        self.logger.debug(f"‚úÖ W{worker_id} –∑–∞–ø—É—â–µ–Ω")
        
        while not self.shutdown_event.is_set():
            try:
                try:
                    region_data = await asyncio.wait_for(
                        region_queue.get(),
                        timeout=1.0
                    )
                except asyncio.TimeoutError:
                    if region_queue.empty():
                        self.logger.debug(f"‚úÖ W{worker_id} –∑–∞–≤–µ—Ä—à–µ–Ω (–æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞)")
                        break
                    continue
                
                region_code, region_name, start_pos = region_data
                
            except asyncio.CancelledError:
                self.logger.debug(f"üõë W{worker_id} –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                self.logger.error(f"‚ùå W{worker_id} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                break
            
            if self.shutdown_event.is_set():
                self.logger.warning(f"‚ö†Ô∏è W{worker_id} | {region_name} –ø—Ä–æ–ø—É—â–µ–Ω (shutdown)")
                region_queue.task_done()
                continue
            
            success = False
            for attempt in range(1, self.config.REGION_RETRY_LIMIT + 1):
                try:
                    async with tab_manager.get_tab() as page:
                        await self._parse_region(
                            page, region_code, region_name, start_pos, worker_id
                        )
                    
                    success = True
                    break
                    
                except Exception as e:
                    if self.shutdown_event.is_set():
                        self.logger.error(f"‚ùå W{worker_id} | {region_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        break
                    
                    if attempt < self.config.REGION_RETRY_LIMIT:
                        delay = self.config.RETRY_DELAY * attempt
                        self.logger.warning(
                            f"‚ö†Ô∏è W{worker_id} | {region_name} "
                            f"–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{self.config.REGION_RETRY_LIMIT}, "
                            f"–ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}s: {e}"
                        )
                        await asyncio.sleep(delay)
                    else:
                        self.logger.error(f"‚ùå W{worker_id} | {region_name} –û–®–ò–ë–ö–ê")
            
            region_queue.task_done()
            
            if not success:
                self.logger.warning(f"‚ö†Ô∏è {region_name} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        
        self.logger.debug(f"‚úÖ W{worker_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def _missing_numbers_worker(
        self,
        worker_id: int,
        missing_queue: asyncio.Queue[Tuple[int, str, List[int]]],
        tab_manager: StealthTabManager
    ) -> None:
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤."""
        self.logger.debug(f"‚úÖ MW{worker_id} –∑–∞–ø—É—â–µ–Ω (missing)")
        
        while not self.shutdown_event.is_set():
            try:
                try:
                    region_data = await asyncio.wait_for(
                        missing_queue.get(),
                        timeout=1.0
                    )
                except asyncio.TimeoutError:
                    if missing_queue.empty():
                        break
                    continue
                
                region_code, region_name, numbers = region_data
                    
            except asyncio.CancelledError:
                self.logger.debug(f"üõë MW{worker_id} –æ—Ç–º–µ–Ω–µ–Ω")
                break
            
            if self.shutdown_event.is_set():
                self.logger.warning(f"‚ö†Ô∏è MW{worker_id} | {region_name} (missing) –ø—Ä–æ–ø—É—â–µ–Ω")
                missing_queue.task_done()
                continue
            
            for attempt in range(1, self.config.REGION_RETRY_LIMIT + 1):
                try:
                    async with tab_manager.get_tab() as page:
                        await self._process_missing_numbers(
                            page, region_code, region_name, numbers, worker_id
                        )
                    break
                    
                except Exception as e:
                    if self.shutdown_event.is_set():
                        break
                    
                    if attempt < self.config.REGION_RETRY_LIMIT:
                        delay = self.config.RETRY_DELAY * attempt
                        self.logger.warning(f"‚ö†Ô∏è MW{worker_id} | {region_name} retry {attempt}")
                        await asyncio.sleep(delay)
            
            missing_queue.task_done()
        
        self.logger.debug(f"‚úÖ MW{worker_id} –∑–∞–≤–µ—Ä—à–µ–Ω (missing)")
    
    async def _parse_region(
        self,
        page: Page,
        region_code: int,
        region_name: str,
        start_position: int,
        worker_id: int
    ):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏."""
        await page.goto(
            self.config.SEARCH_URL,
            timeout=self.config.PAGE_TIMEOUT,
            wait_until="domcontentloaded"
        )
        
        await page.wait_for_selector(
            'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]',
            state="visible",
            timeout=10000
        )
        
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        await asyncio.sleep(
            random.uniform(self.config.NATURAL_DELAY_MIN, self.config.NATURAL_DELAY_MAX)
        )
        
        current_position = start_position
        empty_count = 0
        found_count = 0
        
        input_selector = 'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]'
        button_selector = "button.btn.btn-primary:has-text('–Ü–∑–¥–µ—É')"
        
        while current_position <= self.config.MAX_NUMBER and not self.shutdown_event.is_set():
            found_in_position = False
            
            for check_type in [1, 2]:
                if self.shutdown_event.is_set():
                    break
                
                reg_num = f"25{region_code}170101{check_type}/{current_position:05d}"
                
                try:
                    result = await self._try_number_safe(
                        page, reg_num, worker_id, input_selector, button_selector
                    )
                    
                    if result:
                        await self.data_queue.put({
                            'data': result,
                            'region_code': region_code
                        })
                        found_in_position = True
                        found_count += 1
                        empty_count = 0
                        break
                except Exception:
                    pass
            
            if not found_in_position:
                empty_count += 1
                if empty_count >= self.config.MAX_EMPTY_SEQUENCE:
                    break
            
            current_position += 1
        
        if region_code in self.region_stats:
            self.region_stats[region_code]['found_new'] += found_count
        
        self.log_manager.increment_metric('regions_completed')
        self.logger.info("‚úÖ %s –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–∞–π–¥–µ–Ω–æ: %d)", region_name, found_count)
    
    async def _process_missing_numbers(
        self,
        page: Page,
        region_code: int,
        region_name: str,
        numbers: List[int],
        worker_id: int
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤."""
        await page.goto(
            self.config.SEARCH_URL,
            timeout=self.config.PAGE_TIMEOUT,
            wait_until="domcontentloaded"
        )
        
        await page.wait_for_selector(
            'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]',
            state="visible",
            timeout=10000
        )
        
        found_count = 0
        
        for number in numbers:
            if self.shutdown_event.is_set():
                break
            
            for check_type in [1, 2]:
                reg_num = f"25{region_code}170101{check_type}/{number:05d}"
                
                try:
                    result = await self._try_number_safe(
                        page,
                        reg_num,
                        worker_id,
                        'input[placeholder="–¢–µ–∫—Å–µ—Ä—É/ —Ç—ñ—Ä–∫–µ—É –Ω”©–º—ñ—Ä—ñ"]',
                        "button.btn.btn-primary:has-text('–Ü–∑–¥–µ—É')"
                    )
                    
                    if result:
                        await self.data_queue.put({
                            'data': result,
                            'region_code': region_code
                        })
                        found_count += 1
                        break
                        
                except Exception:
                    pass
        
        if region_code in self.region_stats:
            self.region_stats[region_code]['found_new'] += found_count
        
        self.logger.info(
            "‚úÖ %s: –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ (%d/%d)", 
            region_name, 
            found_count, 
            len(numbers)
        )
    
    async def _try_number_safe(
        self,
        page: Page,
        registration_number: str,
        worker_id: int,
        input_selector: str,
        button_selector: str
    ) -> Optional[Dict]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –ë–ï–ó race conditions."""
        self.log_manager.increment_metric('api_requests')
        
        for attempt in range(1, self.config.MAX_RETRIES + 1):
            try:
                if self.shutdown_event.is_set():
                    return None
                
                await page.wait_for_selector(input_selector, state="visible", timeout=5000)
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
                await asyncio.sleep(
                    random.uniform(self.config.NATURAL_DELAY_MIN, self.config.NATURAL_DELAY_MAX)
                )

                await page.fill(input_selector, '')
                await page.fill(input_selector, registration_number)

                await asyncio.sleep(
                    random.uniform(self.config.TYPING_DELAY_MIN, self.config.TYPING_DELAY_MAX)
                )
                
                async with self._response_listener(page) as wait_response:
                    await page.click(button_selector)
                    response_data = await wait_response()
                
                if not response_data:
                    if attempt < self.config.MAX_RETRIES:
                        await asyncio.sleep(self.config.RETRY_DELAY)
                        continue
                    return None
                
                is_valid, error_msg = self.api_validator.validate_response(
                    response_data,
                    context=f"W{worker_id}:{registration_number}"
                )
                
                if not is_valid:
                    if self.api_validator.is_critical_error(response_data):
                        self.logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê API: {error_msg}")
                        self.shutdown_event.set()
                        return None
                    if attempt < self.config.MAX_RETRIES:
                        await asyncio.sleep(self.config.RETRY_DELAY)
                        continue
                    return None
                
                total_elements = response_data.get("data", {}).get("totalElements", 0)
                if total_elements == 0:
                    return None
                
                processed_data = self.data_processor.process_api_response(response_data)
                if processed_data:
                    self.log_manager.increment_metric('records_processed')
                
                return processed_data
                
            except asyncio.TimeoutError:
                if attempt < self.config.MAX_RETRIES:
                    await asyncio.sleep(self.config.RETRY_DELAY * attempt)
                else:
                    self.log_manager.increment_metric('api_errors')
                    return None
            except Exception as e:
                if self.shutdown_event.is_set():
                    return None
                if attempt < self.config.MAX_RETRIES:
                    await asyncio.sleep(self.config.RETRY_DELAY * attempt)
                else:
                    self.log_manager.increment_metric('api_errors')
                    return None
        
        return None
    
    @asynccontextmanager
    async def _response_listener(self, page: Page):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏."""
        response_future: asyncio.Future[Dict] = asyncio.Future()
        
        async def handle_response(response: Response):
            try:
                if self.config.API_ENDPOINT in response.url and not response_future.done():
                    json_data = await response.json()
                    response_future.set_result(json_data)
            except Exception as e:
                if not response_future.done():
                    response_future.set_exception(e)
        
        page.on("response", handle_response)
        
        async def wait_response():
            try:
                return await asyncio.wait_for(
                    response_future,
                    timeout=self.config.RESPONSE_TIMEOUT
                )
            except:
                return None
        
        try:
            yield wait_response
        finally:
            with suppress(Exception):
                page.remove_listener("response", handle_response)
    
    async def _data_handler(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""
        batch = []
        last_save_time = asyncio.get_event_loop().time()
        save_interval = 5.0
        total_saved = 0
        
        self.logger.info(f"üíæ Data handler –∑–∞–ø—É—â–µ–Ω (–±–∞—Ç—á={self.config.BATCH_SIZE})")
        
        while True:
            try:
                current_time = asyncio.get_event_loop().time()
                timeout = max(0.5, save_interval - (current_time - last_save_time))
                
                item = await asyncio.wait_for(self.data_queue.get(), timeout=timeout)
                
                if item is None:
                    self.logger.info("üõë –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è data handler")
                    break
                
                batch.append(item['data'])
                
                current_time = asyncio.get_event_loop().time()
                should_save = (
                    len(batch) >= self.config.BATCH_SIZE or
                    (current_time - last_save_time) >= save_interval
                )
                
                if should_save and batch:
                    try:
                        tax, customs = await self.db_manager.bulk_insert_data(batch, silent=True)
                        total_inserted = tax + customs
                        total_saved += total_inserted
                        
                        self.log_manager.increment_metric('db_inserts', total_inserted)
                        
                        if total_inserted > 0:
                            self.logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: TAX=%d, CUSTOMS=%d, –≤—Å–µ–≥–æ=%d", tax, customs, total_saved)
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                    
                    batch.clear()
                    last_save_time = asyncio.get_event_loop().time()
                
            except asyncio.TimeoutError:
                if batch:
                    try:
                        tax, customs = await self.db_manager.bulk_insert_data(batch, silent=True)
                        total_saved += (tax + customs)
                        self.log_manager.increment_metric('db_inserts', tax + customs)
                        if tax + customs > 0:
                            self.logger.info(f"üíæ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: TAX={tax}, CUSTOMS={customs}")
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                    batch.clear()
                    last_save_time = asyncio.get_event_loop().time()
            
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ data handler: {e}", exc_info=True)
                if batch:
                    try:
                        tax, customs = await self.db_manager.bulk_insert_data(batch, silent=False)
                        self.logger.info(f"üíæ –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {len(batch)} –∑–∞–ø–∏—Å–µ–π")
                    except Exception:
                        self.logger.critical(f"üö® –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•: {len(batch)} –∑–∞–ø–∏—Å–µ–π")
                    batch.clear()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if batch:
            try:
                tax, customs = await self.db_manager.bulk_insert_data(batch, silent=False)
                total_saved += (tax + customs)
                self.logger.info(f"üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: TAX={tax}, CUSTOMS={customs}")
            except Exception as e:
                self.logger.critical(f"üö® –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•: {len(batch)} –∑–∞–ø–∏—Å–µ–π: {e}")
        
        self.logger.info(f"‚úÖ Data handler –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ: {total_saved} –∑–∞–ø–∏—Å–µ–π")
    
    async def _print_final_table(self) -> None:
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Å–∏–≤–æ–π –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        self.logger.info("")
        self.logger.info("=" * 120)
        self.logger.info("üìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ü–û –†–ï–ì–ò–û–ù–ê–ú")
        self.logger.info("=" * 120)
        
        header = f"{'–†–µ–≥–∏–æ–Ω':<20} | {'–ó–∞–ø–∏—Å–µ–π':>10} | {'–°–ª–µ–¥. –Ω–æ–º–µ—Ä':>12} | {'–ü—Ä–æ–ø—É—â–µ–Ω–æ':>11} | {'–ù–∞–π–¥–µ–Ω–æ':>10}"
        self.logger.info(header)
        self.logger.info("-" * 120)
        
        total_records = total_missing = total_found = 0
        
        for region_code in sorted(self.config.REGIONS.keys()):
            region_name = self.config.REGIONS[region_code]
            stats = self.region_stats.get(region_code, {
                'total_records': 0,
                'next_number': 1,
                'missing_count': 0,
                'found_new': 0
            })
            
            row = (
                f"{region_name:<20} | {stats['total_records']:>10} | "
                f"{stats['next_number']:>12} | {stats['missing_count']:>11} | "
                f"{stats['found_new']:>10}"
            )
            self.logger.info(row)
            
            total_records += stats['total_records']
            total_missing += stats['missing_count']
            total_found += stats['found_new']
        
        self.logger.info("=" * 120)
        summary = f"{'–ò–¢–û–ì–û':<20} | {total_records:>10} | {'-':>12} | {total_missing:>11} | {total_found:>10}"
        self.logger.info(summary)
        self.logger.info("=" * 120)
        
        metrics = self.log_manager.get_metrics_summary()
        self.logger.info("")
        self.logger.info("üìà –ú–ï–¢–†–ò–ö–ò:")
        self.logger.info(f"   ‚îî‚îÄ –í—Ä–µ–º—è: {metrics['elapsed_seconds']}s")
        self.logger.info(f"   ‚îî‚îÄ API –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['api_requests']}")
        self.logger.info(f"   ‚îî‚îÄ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics['records_processed']}")
        self.logger.info(f"   ‚îî‚îÄ –°–∫–æ—Ä–æ—Å—Ç—å: {metrics['records_per_second']} –∑–∞–ø/—Å")

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description='–ü–∞—Ä—Å–µ—Ä QAMQOR')
    parser.add_argument('--missing-only', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ')
    return parser.parse_args()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    args = parse_arguments()
    mode = "missing_only" if args.missing_only else "full"
    parser = QamqorParser(mode=mode)
    success = await parser.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)