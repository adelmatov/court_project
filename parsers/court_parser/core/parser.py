# parsers/court_parser/core/parser.py
"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ —Å retry –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
"""

import asyncio
import aiohttp
from typing import Optional, Dict, List, Any

from config.settings import Settings
from core.session import SessionManager
from auth.authenticator import Authenticator
from search.form_handler import FormHandler
from search.search_engine import SearchEngine
from parsing.html_parser import ResultsParser
from database.db_manager import DatabaseManager
from database.models import CaseData, SearchResult
from utils.text_processor import TextProcessor
from utils.logger import get_logger
from utils.retry import RetryStrategy, RetryConfig, NonRetriableError


class CourtParser:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ —Å retry –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    
    def __init__(self, config_path: Optional[str] = None, update_mode: bool = False):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.settings = Settings(config_path)
        
        # –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´
        self.update_mode = update_mode
        
        # Retry –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.retry_config = self.settings.config.get('retry_settings', {})
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å retry
        self.session_manager = SessionManager(
            timeout=30,
            retry_config=self.retry_config
        )
        
        self.authenticator = Authenticator(
            self.settings.base_url,
            self.settings.auth,
            retry_config=self.retry_config
        )
        
        self.form_handler = FormHandler(self.settings.base_url)
        self.search_engine = SearchEngine(self.settings.base_url)
        self.results_parser = ResultsParser()
        self.db_manager = DatabaseManager(self.settings.database)
        self.text_processor = TextProcessor()
        
        # –ù–û–í–û–ï: Lock –¥–ª—è stateful –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–æ—Ä–º–æ–π
        self.form_lock = asyncio.Lock()
        
        # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.session_error_count = 0
        self.max_session_errors = 10
        
        # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π
        self.reauth_count = 0
        self.max_reauth = self.retry_config.get('session_recovery', {}).get(
            'max_reauth_attempts', 2
        )
        
        self.logger = get_logger('court_parser')
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        mode_name = "Update Mode" if self.update_mode else "Full Scan Mode"
        self.logger.info(f"üöÄ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ: {mode_name}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)"""
        try:
            await self.db_manager.connect()
            await self.authenticator.authenticate(self.session_manager)
            self.logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            await self.cleanup()
            raise
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            await self.db_manager.disconnect()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
        
        try:
            await self.session_manager.close()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        
        self.logger.info("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    
    async def _handle_session_recovery(self, error: Exception) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        reauth_on_401 = self.retry_config.get('session_recovery', {}).get('reauth_on_401', True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ HTTP 401
        if not (isinstance(error, (aiohttp.ClientError, NonRetriableError)) and '401' in str(error)):
            return False
        
        if not reauth_on_401:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π
        if self.reauth_count >= self.max_reauth:
            self.logger.error(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π ({self.max_reauth})"
            )
            return False
        
        self.reauth_count += 1
        
        self.logger.warning(
            f"‚ö†Ô∏è HTTP 401: –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è "
            f"({self.reauth_count}/{self.max_reauth})..."
        )
        
        try:
            await self.authenticator.authenticate(self.session_manager)
            self.session_error_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
            self.logger.info("‚úÖ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
        
        except Exception as e:
            self.logger.error(f"‚ùå –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return False
    
    async def _handle_rate_limit(self, response: aiohttp.ClientResponse):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP 429 (Rate Limit)"""
        rate_limit_config = self.retry_config.get('rate_limit', {})
        
        # –ß–∏—Ç–∞–µ–º header Retry-After
        retry_after = response.headers.get('Retry-After')
        
        if retry_after and rate_limit_config.get('respect_retry_after_header', True):
            try:
                wait_time = int(retry_after)
            except ValueError:
                wait_time = rate_limit_config.get('default_wait', 60)
        else:
            wait_time = rate_limit_config.get('default_wait', 60)
        
        self.logger.warning(
            f"‚ö†Ô∏è HTTP 429 (Rate Limit), –∂–¥–µ–º {wait_time} —Å–µ–∫..."
        )
        
        await asyncio.sleep(wait_time)
        
        # TODO: –£–º–µ–Ω—å—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ –≤ adaptive)
    
    async def search_and_save_with_retry(self, region_key: str, court_key: str,
                                    case_number: str, year: str = "2025") -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–ª–∞ —Å retry –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        
        Returns:
            {
                'success': True/False,
                'target_found': True/False,
                'total_saved': 5,
                'related_saved': 4,
                'target_case_number': '...',
                'error': None –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π
            }
        """
        search_retry_config = self.retry_config.get('search_case', {})
        
        if not search_retry_config:
            # –ë–µ–∑ retry
            try:
                return await self._do_search_and_save(region_key, court_key, case_number, year)
            except NonRetriableError as e:
                return {
                    'success': False,
                    'target_found': False,
                    'total_saved': 0,
                    'related_saved': 0,
                    'error': str(e)
                }
        
        # –° retry
        retry_cfg = RetryConfig(search_retry_config)
        strategy = RetryStrategy(retry_cfg, self.session_manager.circuit_breaker)
        
        async def _search_with_recovery():
            try:
                return await self._do_search_and_save(region_key, court_key, case_number, year)
            
            except Exception as e:
                # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
                if await self._handle_session_recovery(e):
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    return await self._do_search_and_save(region_key, court_key, case_number, year)
                raise
        
        try:
            result = await strategy.execute_with_retry(
                _search_with_recovery,
                error_context=f"–ü–æ–∏—Å–∫ –¥–µ–ª–∞ {case_number}"
            )
            
            # –£—Å–ø–µ—Ö - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.session_error_count = 0
            
            return result
        
        except NonRetriableError as e:
            # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–¥–µ–ª–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            self.session_error_count = 0
            return {
                'success': False,
                'target_found': False,
                'total_saved': 0,
                'related_saved': 0,
                'error': str(e)
            }
        
        except Exception as e:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–æ retry –∏—Å—á–µ—Ä–ø–∞–Ω
            self.session_error_count += 1
            
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ–ª–æ –ø–æ—Å–ª–µ retry: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–¥—Ä—è–¥
            if self.session_error_count >= self.max_session_errors:
                self.logger.warning(
                    f"‚ö†Ô∏è {self.max_session_errors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, "
                    f"–ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
                )
                
                if await self._handle_session_recovery(Exception("Multiple failures")):
                    self.session_error_count = 0
            
            return {
                'success': False,
                'target_found': False,
                'total_saved': 0,
                'related_saved': 0,
                'error': str(e)
            }

    # –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def search_and_save(self, *args, **kwargs):
        return await self.search_and_save_with_retry(*args, **kwargs)
    
    async def _do_search_and_save(self, region_key: str, court_key: str,
                        case_number: str, year: str) -> Dict[str, Any]:
        """
        –û–¥–∏–Ω —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å Lock –Ω–∞ stateful –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
        1. [LOCK] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã + –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ + –ø–æ–∏—Å–∫ (stateful)
        2. [–ë–ï–ó LOCK] –ü–∞—Ä—Å–∏–Ω–≥ HTML + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (stateless)
        
        Returns:
            {
                'success': True/False,
                'target_found': True/False,
                'total_saved': 5,
                'related_saved': 4,
                'target_case_number': '6294-25-00-4/1',
                'error': None –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π
            }
        """
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        region_config = self.settings.get_region(region_key)
        court_config = self.settings.get_court(region_key, court_key)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        full_case_number = self.text_processor.generate_case_number(
            region_config, court_config, year, int(case_number)
        )
        
        self.logger.info(f"üîç –ò—â—É –¥–µ–ª–æ: {full_case_number}")
        
        # ============================================================
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ï–ö–¶–ò–Ø: Stateful –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ–¥ Lock)
        # ============================================================
        async with self.form_lock:
            self.logger.debug(f"[{region_key}] –ó–∞—Ö–≤–∞—Ç–∏–ª form_lock")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            session = await self.session_manager.get_session()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã
            viewstate, form_ids = await self.form_handler.prepare_search_form(session)
            
            # –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
            await self.form_handler.select_region(
                session, viewstate, region_config['id'], form_ids
            )
            
            await asyncio.sleep(1)
            
            # –ü–æ–∏—Å–∫
            results_html = await self.search_engine.search_case(
                session, viewstate, region_config['id'], court_config['id'],
                year, full_case_number, form_ids,
                extract_sequence=self.update_mode
            )
            
            self.logger.debug(f"[{region_key}] –û—Å–≤–æ–±–æ–¥–∏–ª form_lock")
        
        # ============================================================
        # Stateless –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ë–ï–ó Lock ‚Äî –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö)
        # ============================================================
        
        # –ü–∞—Ä—Å–∏–Ω–≥
        cases = self.results_parser.parse(results_html)
        
        if not cases:
            self.logger.info(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {full_case_number}")
            return {
                'success': False,
                'target_found': False,
                'total_saved': 0,
                'related_saved': 0,
                'target_case_number': full_case_number,
                'error': 'no_results'
            }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–µ–ª
        saved_count = 0
        target_found = False
        related_count = 0
        
        for case in cases:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–µ–ª–æ –∏–∑ –Ω–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞/—Å—É–¥–∞
            if not case.case_number.startswith(
                f"{region_config['kato_code']}{court_config['instance_code']}"
            ):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–µ–ª–∞
            is_target = (case.case_number == full_case_number)
            
            if is_target:
                target_found = True
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            save_result = await self.db_manager.save_case(case)
            
            if save_result['status'] in ['saved', 'updated']:
                saved_count += 1
                
                if is_target:
                    judge = "‚úÖ —Å—É–¥—å—è" if case.judge else "‚ö†Ô∏è –±–µ–∑ —Å—É–¥—å–∏"
                    parties = len(case.plaintiffs) + len(case.defendants)
                    events = len(case.events)
                    self.logger.info(
                        f"‚úÖ –¶–ï–õ–ï–í–û–ï: {case.case_number} "
                        f"({judge}, {parties} —Å—Ç–æ—Ä–æ–Ω—ã, {events} —Å–æ–±—ã—Ç–∏—è)"
                    )
                else:
                    related_count += 1
                    self.logger.debug(f"üíæ –°–≤—è–∑–∞–Ω–Ω–æ–µ: {case.case_number}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥
        if saved_count > 0:
            if saved_count > 1:
                self.logger.info(
                    f"üíæ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count} –¥–µ–ª "
                    f"(—Ü–µ–ª–µ–≤–æ–µ: {1 if target_found else 0}, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö: {related_count})"
                )
            
            if not target_found:
                self.logger.warning(
                    f"‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–µ –¥–µ–ª–æ {full_case_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, "
                    f"–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö"
                )
            
            return {
                'success': True,
                'target_found': target_found,
                'total_saved': saved_count,
                'related_saved': related_count,
                'target_case_number': full_case_number
            }
        else:
            self.logger.info(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –¥–µ–ª–∞ {full_case_number}")
            
            return {
                'success': False,
                'target_found': False,
                'total_saved': 0,
                'related_saved': 0,
                'target_case_number': full_case_number,
                'error': 'nothing_saved'
            }
    
    # –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def search_and_save(self, *args, **kwargs):
        return await self.search_and_save_with_retry(*args, **kwargs)
    
    async def __aenter__(self):
        await self.initialize()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.cleanup()
        # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        return False