"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø–∞—Ä—Å–µ—Ä–∞
"""
import asyncio
import sys
from typing import Optional, List
import traceback

from core.parser import CourtParser
from config.settings import Settings
from utils.logger import setup_logger
from utils import TextProcessor


async def parse_all_regions_from_config() -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–∑ config.json"""
    logger = setup_logger('main', level='INFO')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings = Settings()
    ps = settings.parsing_settings
    
    year = ps.get('year', '2025')
    court_types = ps.get('court_types', ['smas'])
    start_from = ps.get('start_from', 1)
    max_number = ps.get('max_number', 9999)
    max_consecutive_failures = ps.get('max_consecutive_failures', 50)
    delay_between_requests = ps.get('delay_between_requests', 2)
    max_parallel_regions = ps.get('max_parallel_regions', 1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–≥–∏–æ–Ω–∞
    region_retry_max_attempts = ps.get('region_retry_max_attempts', 3)
    region_retry_delay = ps.get('region_retry_delay_seconds', 5)
    
    # –õ–ò–ú–ò–¢–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
    limit_regions = settings.get_limit_regions()
    limit_cases_per_region = settings.get_limit_cases_per_region()
    
    logger.info("=" * 70)
    logger.info(f"–ú–ê–°–°–û–í–´–ô –ü–ê–†–°–ò–ù–ì: {', '.join(court_types)} ({year})")
    logger.info("=" * 70)
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json:")
    logger.info(f"  –ì–æ–¥: {year}")
    logger.info(f"  –¢–∏–ø—ã —Å—É–¥–æ–≤: {', '.join(court_types)}")
    logger.info(f"  –î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤: {start_from}-{max_number}")
    logger.info(f"  –ú–∞–∫—Å. –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥: {max_consecutive_failures}")
    logger.info(f"  –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {delay_between_requests} —Å–µ–∫")
    logger.info(f"  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: {max_parallel_regions}")
    logger.info(f"  Retry –Ω–∞ —Ä–µ–≥–∏–æ–Ω: {region_retry_max_attempts} –ø–æ–ø—ã—Ç–æ–∫, –∑–∞–¥–µ—Ä–∂–∫–∞ {region_retry_delay} —Å–µ–∫")
    
    if limit_regions:
        logger.info(f"  üîí –õ–ò–ú–ò–¢ –†–ï–ì–ò–û–ù–û–í: {limit_regions}")
    if limit_cases_per_region:
        logger.info(f"  üîí –õ–ò–ú–ò–¢ –ó–ê–ü–†–û–°–û–í –ù–ê –†–ï–ì–ò–û–ù: {limit_cases_per_region}")
    
    logger.info("=" * 70)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
    all_regions = settings.get_target_regions()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
    if limit_regions:
        regions_to_process = all_regions[:limit_regions]
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(regions_to_process)} –∏–∑ {len(all_regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
    else:
        regions_to_process = all_regions
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—Å–µ {len(regions_to_process)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (thread-safe)
    total_stats = {
        'regions_processed': 0,
        'regions_failed': 0,
        'total_queries': 0,
        'total_target_cases': 0,
        'total_related_cases': 0,
        'total_cases_saved': 0
    }
    stats_lock = asyncio.Lock()
    
    # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
    semaphore = asyncio.Semaphore(max_parallel_regions)
    
    async def process_region_with_retry_and_semaphore(region_key: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ —Å retry –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
        
        –°–µ–º–∞—Ñ–æ—Ä –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ –≤—Å—ë –≤—Ä–µ–º—è retry (–Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç)
        """
        async with semaphore:
            region_config = settings.get_region(region_key)
            
            for attempt in range(1, region_retry_max_attempts + 1):
                try:
                    logger.info(f"\n{'='*70}")
                    if attempt > 1:
                        logger.info(f"üîÑ –†–µ–≥–∏–æ–Ω: {region_config['name']} (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{region_retry_max_attempts})")
                    else:
                        logger.info(f"–†–µ–≥–∏–æ–Ω: {region_config['name']}")
                    logger.info(f"{'='*70}")
                    
                    # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Å—É–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞
                    region_stats = await process_region_all_courts(
                        parser=parser,
                        settings=settings,
                        region_key=region_key,
                        court_types=court_types,
                        year=year,
                        start_from=start_from,
                        max_number=max_number,
                        max_consecutive_failures=max_consecutive_failures,
                        delay_between_requests=delay_between_requests,
                        limit_cases=limit_cases_per_region
                    )
                    
                    # –£—Å–ø–µ—Ö ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    async with stats_lock:
                        total_stats['regions_processed'] += 1
                        total_stats['total_queries'] += region_stats['total_queries']
                        total_stats['total_target_cases'] += region_stats['total_target_cases']
                        total_stats['total_related_cases'] += region_stats['total_related_cases']
                        total_stats['total_cases_saved'] += region_stats['total_cases_saved']
                    
                    return region_stats
                
                except Exception as e:
                    if attempt < region_retry_max_attempts:
                        logger.warning(
                            f"‚ö†Ô∏è –†–µ–≥–∏–æ–Ω {region_config['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π "
                            f"(–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{region_retry_max_attempts})"
                        )
                        logger.warning(f"   –û—à–∏–±–∫–∞: {e}")
                        logger.info(f"   –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é HTTP —Å–µ—Å—Å–∏—é –∏ –ø–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ {region_retry_delay} —Å–µ–∫...")
                        
                        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                        await parser.session_manager.create_session()
                        await asyncio.sleep(region_retry_delay)
                    else:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ failed
                        logger.error(
                            f"‚ùå –†–µ–≥–∏–æ–Ω {region_config['name']} failed –ø–æ—Å–ª–µ "
                            f"{region_retry_max_attempts} –ø–æ–ø—ã—Ç–æ–∫"
                        )
                        logger.error(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                        logger.error(traceback.format_exc())
                        
                        async with stats_lock:
                            total_stats['regions_failed'] += 1
                        
                        return None
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑
    async with CourtParser() as parser:
        # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        tasks = [
            process_region_with_retry_and_semaphore(region_key)
            for region_key in regions_to_process
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ (—Å–µ–º–∞—Ñ–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å)
        results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\n" + "=" * 70)
    logger.info("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {total_stats['regions_processed']}")
    if total_stats['regions_failed'] > 0:
        logger.info(f"  –†–µ–≥–∏–æ–Ω–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {total_stats['regions_failed']}")
    logger.info(f"  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É: {total_stats['total_queries']}")
    logger.info(f"  –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö –¥–µ–ª: {total_stats['total_target_cases']}")
    logger.info(f"  –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ–ª: {total_stats['total_related_cases']}")
    logger.info(f"  –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–µ–ª: {total_stats['total_cases_saved']}")
    
    if total_stats['total_queries'] > 0:
        avg_per_query = total_stats['total_cases_saved'] / total_stats['total_queries']
        logger.info(f"  –°—Ä–µ–¥–Ω–µ–µ –¥–µ–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_per_query:.1f}")
    
    logger.info("=" * 70)
    
    return total_stats


async def process_region_all_courts(
    parser,
    settings,
    region_key: str,
    court_types: List[str],
    year: str,
    start_from: int,
    max_number: int,
    max_consecutive_failures: int,
    delay_between_requests: float,
    limit_cases: Optional[int] = None
) -> dict:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—É–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û
    
    Args:
        parser: —ç–∫–∑–µ–º–ø–ª—è—Ä CourtParser
        settings: —ç–∫–∑–µ–º–ø–ª—è—Ä Settings
        region_key: –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞ ('astana', 'almaty', ...)
        court_types: —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å—É–¥–æ–≤ (['smas', 'appellate'])
        year: –≥–æ–¥ ('2025')
        start_from: –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞ (1)
        max_number: –∫–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞ (9999)
        max_consecutive_failures: –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥ (50)
        delay_between_requests: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (2.0)
        limit_cases: –ª–∏–º–∏—Ç –¥–µ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (None = –±–µ–∑ –ª–∏–º–∏—Ç–∞)
    
    Returns:
        {
            'region_key': 'astana',
            'courts_processed': 2,
            'total_queries': 100,
            'total_target_cases': 10,
            'total_related_cases': 90,
            'total_cases_saved': 100,
            'courts_stats': {
                'smas': {...},
                'appellate': {...}
            }
        }
    """
    logger = setup_logger('main', level='INFO')
    region_config = settings.get_region(region_key)
    
    region_stats = {
        'region_key': region_key,
        'courts_processed': 0,
        'total_queries': 0,
        'total_target_cases': 0,
        'total_related_cases': 0,
        'total_cases_saved': 0,
        'courts_stats': {}
    }
    
    # –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–¥–æ–≤
    for court_key in court_types:
        court_config = region_config['courts'][court_key]
        logger.info(f"\nüìç –°—É–¥: {court_config['name']}")
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å—É–¥–∞
            court_stats = await parse_court(
                parser=parser,
                settings=settings,
                region_key=region_key,
                court_key=court_key,
                year=year,
                start_from=start_from,
                max_number=max_number,
                max_consecutive_failures=max_consecutive_failures,
                delay_between_requests=delay_between_requests,
                limit_cases=limit_cases
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞
            region_stats['courts_processed'] += 1
            region_stats['total_queries'] += court_stats['queries_made']
            region_stats['total_target_cases'] += court_stats['target_cases_found']
            region_stats['total_related_cases'] += court_stats['related_cases_found']
            region_stats['total_cases_saved'] += court_stats['total_cases_saved']
            region_stats['courts_stats'][court_key] = court_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É–¥–∞ {court_key}: {e}")
            logger.error(traceback.format_exc())
            continue
    
    # –ò—Ç–æ–≥–∏ —Ä–µ–≥–∏–æ–Ω–∞
    logger.info(f"\n{'-'*70}")
    logger.info(f"–ò–¢–û–ì–ò –†–ï–ì–ò–û–ù–ê {region_config['name']}:")
    logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—É–¥–æ–≤: {region_stats['courts_processed']}/{len(court_types)}")
    logger.info(f"  –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É: {region_stats['total_queries']}")
    logger.info(f"  –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö –¥–µ–ª: {region_stats['total_target_cases']}")
    logger.info(f"  –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ–ª: {region_stats['total_related_cases']}")
    logger.info(f"  –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–µ–ª: {region_stats['total_cases_saved']}")
    
    if region_stats['total_queries'] > 0:
        target_rate = (region_stats['total_target_cases'] / region_stats['total_queries'] * 100)
        logger.info(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —Ü–µ–ª–µ–≤—ã—Ö –¥–µ–ª: {target_rate:.1f}%")
    
    logger.info(f"{'-'*70}")
    
    return region_stats


async def parse_court(
    parser,
    settings,
    region_key: str,
    court_key: str,
    year: str,
    start_from: int,
    max_number: int,
    max_consecutive_failures: int,
    delay_between_requests: float,
    limit_cases: Optional[int] = None
) -> dict:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å—É–¥–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ –¥–µ–ª–∞–º)
    
    Args:
        parser: —ç–∫–∑–µ–º–ø–ª—è—Ä CourtParser
        settings: —ç–∫–∑–µ–º–ø–ª—è—Ä Settings
        region_key: –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞ ('astana')
        court_key: –∫–ª—é—á —Å—É–¥–∞ ('smas')
        year: –≥–æ–¥ ('2025')
        start_from: –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞ (1)
        max_number: –∫–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞ (9999)
        max_consecutive_failures: –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥ (50)
        delay_between_requests: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (2.0)
        limit_cases: –ª–∏–º–∏—Ç –¥–µ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (None = –±–µ–∑ –ª–∏–º–∏—Ç–∞)
    
    Returns:
        {
            'queries_made': 100,
            'target_cases_found': 10,
            'related_cases_found': 90,
            'total_cases_saved': 100,
            'consecutive_failures': 0
        }
    """
    logger = setup_logger('main', level='INFO')
    
    stats = {
        'queries_made': 0,
        'target_cases_found': 0,
        'related_cases_found': 0,
        'total_cases_saved': 0,
        'consecutive_failures': 0
    }
    
    current_number = start_from
    
    while current_number <= max_number:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–µ–ª
        if limit_cases and stats['queries_made'] >= limit_cases:
            logger.info(f"üîí –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–µ–ª ({limit_cases}), –∑–∞–≤–µ—Ä—à–∞—é —Å—É–¥")
            break
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–µ—É–¥–∞—á
        if stats['consecutive_failures'] >= max_consecutive_failures:
            logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á ({max_consecutive_failures}), –∑–∞–≤–µ—Ä—à–∞—é —Å—É–¥")
            break
        
        # –ü–æ–∏—Å–∫ –¥–µ–ª–∞
        result = await parser.search_and_save(
            region_key=region_key,
            court_key=court_key,
            case_number=str(current_number),
            year=year
        )
        
        stats['queries_made'] += 1
        
        if result['success']:
            # –£—Å–ø–µ—Ö
            stats['total_cases_saved'] += result['total_saved']
            
            if result['target_found']:
                stats['target_cases_found'] += 1
            
            stats['related_cases_found'] += result['related_saved']
            stats['consecutive_failures'] = 0
        else:
            # –ù–µ—É–¥–∞—á–∞
            stats['consecutive_failures'] += 1
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if stats['queries_made'] % 10 == 0:
            logger.info(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –∑–∞–ø—Ä–æ—Å–æ–≤ {stats['queries_made']}, "
                f"–Ω–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö {stats['target_cases_found']}, "
                f"–≤—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {stats['total_cases_saved']}"
            )
        
        current_number += 1
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(delay_between_requests)
    
    return stats


async def update_cases_history():
    """
    –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ª
    """
    logger = setup_logger('main', level='INFO')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings = Settings()
    update_config = settings.update_settings
    
    if not update_config.get('enabled'):
        logger.warning("‚ö†Ô∏è Update Mode –æ—Ç–∫–ª—é—á–µ–Ω –≤ config.json")
        return
    
    logger.info("\n" + "=" * 70)
    logger.info("–†–ï–ñ–ò–ú –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò –î–ï–õ")
    logger.info("=" * 70)
    logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_config['update_interval_days']} –¥–Ω–µ–π")
    logger.info(f"–§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–≤–µ—Ç—á–∏–∫—É: {update_config['filters']['defendant_keywords']}")
    logger.info(f"–ò—Å–∫–ª—é—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è: {update_config['filters']['exclude_event_types']}")
    logger.info("=" * 70)
    
    stats = {
        'checked': 0,
        'updated': 0,
        'no_changes': 0,
        'errors': 0
    }
    
    # –ò–ó–ú–ï–ù–ï–ù–û: —Å–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä –° –§–õ–ê–ì–û–ú Update Mode
    async with CourtParser(update_mode=True) as parser:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        cases_to_update = await parser.db_manager.get_cases_for_update({
            'defendant_keywords': update_config['filters']['defendant_keywords'],
            'exclude_event_types': update_config['filters']['exclude_event_types'],
            'update_interval_days': update_config['update_interval_days']
        })
        
        if not cases_to_update:
            logger.info("‚úÖ –ù–µ—Ç –¥–µ–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        logger.info(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(cases_to_update)}")
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...\n")
        
        text_processor = TextProcessor()
        
        for i, case_number in enumerate(cases_to_update, 1):
            try:
                # –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞
                case_info = text_processor.find_region_and_court_by_case_number(
                    case_number, 
                    settings.regions
                )
                
                if not case_info:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–º–µ—Ä: {case_number}")
                    stats['errors'] += 1
                    continue
                
                # –í—ã–∑–æ–≤ –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ update_mode (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è self.update_mode)
                result = await parser.search_and_save(
                    region_key=case_info['region_key'],
                    court_key=case_info['court_key'],
                    case_number=case_info['sequence'],
                    year=case_info['year']
                )
                
                stats['checked'] += 1
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –õ–û–ì–ò–ö–ê
                if result['success']:
                    # –£–°–ü–ï–•: –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ
                    await parser.db_manager.mark_case_as_updated(case_number)
                    
                    if result['total_saved'] > 0:
                        stats['updated'] += 1
                        logger.info(f"‚úÖ [{i}/{len(cases_to_update)}] {case_number}: +{result['total_saved']} —Å–æ–±—ã—Ç–∏–π")
                    else:
                        stats['no_changes'] += 1
                        logger.debug(f"‚ö™ [{i}/{len(cases_to_update)}] {case_number}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                else:
                    # –ù–ï–£–î–ê–ß–ê: –ù–ï –ø–æ–º–µ—á–∞—Ç—å (last_updated_at –æ—Å—Ç–∞—ë—Ç—Å—è —Å—Ç–∞—Ä—ã–º)
                    stats['errors'] += 1
                    logger.warning(f"‚ö†Ô∏è [{i}/{len(cases_to_update)}] {case_number}: –æ—à–∏–±–∫–∞")
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if stats['checked'] % 10 == 0:
                    logger.info(
                        f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['checked']}/{len(cases_to_update)} "
                        f"(–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {stats['no_changes']}, –æ—à–∏–±–æ–∫: {stats['errors']})\n"
                    )
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                # –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –ù–ï –ø–æ–º–µ—á–∞—Ç—å
                stats['errors'] += 1
                logger.error(f"‚ùå [{i}/{len(cases_to_update)}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {case_number}: {e}")
                continue
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\n" + "=" * 70)
    logger.info("–ò–¢–û–ì–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
    logger.info(f"  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–µ–ª: {stats['checked']}")
    logger.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ (–Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è): {stats['updated']}")
    logger.info(f"  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {stats['no_changes']}")
    logger.info(f"  –û—à–∏–±–æ–∫: {stats['errors']}")
    
    if stats['errors'] > 0:
        logger.warning(
            f"\n‚ö†Ô∏è {stats['errors']} –¥–µ–ª –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –∏ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ"
        )
    
    logger.info("=" * 70)


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ config.json
    """
    logger = setup_logger('main', level='INFO')
    
    logger.info("\n" + "=" * 70)
    logger.info("–ü–ê–†–°–ï–† –°–£–î–ï–ë–ù–´–• –î–ï–õ –ö–ê–ó–ê–•–°–¢–ê–ù–ê")
    logger.info("=" * 70)
    logger.info("–í–µ—Ä—Å–∏—è: 2.0.0")
    logger.info("–†–µ–∂–∏–º: –ë–æ–µ–≤–æ–π (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json)")
    logger.info("=" * 70)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
        if '--mode' in sys.argv:
            mode_index = sys.argv.index('--mode')
            if mode_index + 1 < len(sys.argv):
                mode = sys.argv[mode_index + 1]
                
                if mode == 'update':
                    # –†–ï–ñ–ò–ú –û–ë–ù–û–í–õ–ï–ù–ò–Ø
                    await update_cases_history()
                    logger.info("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    return 0
                else:
                    logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
                    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: update")
                    return 1
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: Full Scan Mode
        stats = await parse_all_regions_from_config()
        
        logger.info("\n‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
        return 0
    
    except KeyboardInterrupt:
        logger.warning("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    
    except Exception as e:
        logger.critical(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.critical(traceback.format_exc())
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
