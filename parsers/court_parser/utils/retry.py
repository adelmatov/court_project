"""
–ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ retry —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import asyncio
import random
from typing import Callable, Any, Optional, List, Type
from functools import wraps
from datetime import datetime, timedelta

import aiohttp

from utils.logger import get_logger


class RetryableError(Exception):
    """–û—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å"""
    pass


class NonRetriableError(Exception):
    """–û—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å"""
    pass


class CircuitBreakerOpenError(Exception):
    """Circuit Breaker –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN"""
    pass


class RetryConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry"""
    
    def __init__(self, config: dict):
        self.max_attempts = config.get('max_attempts', 3)
        self.initial_delay = config.get('initial_delay', 1.0)
        self.backoff_multiplier = config.get('backoff_multiplier', 2.0)
        self.max_delay = config.get('max_delay', 30.0)
        self.jitter = config.get('jitter', True)
        self.backoff = config.get('backoff', 'exponential')  # exponential –∏–ª–∏ linear
        
        # –î–ª—è HTTP retry
        self.retriable_status_codes = config.get('retriable_status_codes', [500, 502, 503, 504])
        self.retriable_exceptions = config.get('retriable_exceptions', [])


class CircuitBreaker:
    """
    Circuit Breaker –ø–∞—Ç—Ç–µ—Ä–Ω
    
    –°–æ—Å—Ç–æ—è–Ω–∏—è:
    - CLOSED: –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    - OPEN: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è
    - HALF_OPEN: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    
    def __init__(self, config: dict):
        self.enabled = config.get('enabled', True)
        self.failure_threshold = config.get('failure_threshold', 20)
        self.recovery_timeout = config.get('recovery_timeout', 300)  # —Å–µ–∫—É–Ω–¥
        self.half_open_max_attempts = config.get('half_open_max_attempts', 3)
        
        self.state = 'CLOSED'
        self.failure_count = 0
        self.last_failure_time: Optional[datetime] = None
        self.half_open_success_count = 0
        
        self.logger = get_logger('circuit_breaker')
    
    def record_success(self):
        """–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.enabled:
            return
        
        if self.state == 'HALF_OPEN':
            self.half_open_success_count += 1
            
            if self.half_open_success_count >= self.half_open_max_attempts:
                self.logger.info("üéâ Circuit Breaker: HALF_OPEN ‚Üí CLOSED (—Å–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
                self.state = 'CLOSED'
                self.failure_count = 0
                self.half_open_success_count = 0
        
        elif self.state == 'CLOSED':
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            self.failure_count = max(0, self.failure_count - 1)
    
    def record_failure(self):
        """–ó–∞–ø–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.enabled:
            return
        
        self.failure_count += 1
        self.last_failure_time = datetime.now()
        
        if self.state == 'CLOSED' and self.failure_count >= self.failure_threshold:
            self.logger.critical(
                f"üö® Circuit Breaker: CLOSED ‚Üí OPEN "
                f"({self.failure_count} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥)"
            )
            self.state = 'OPEN'
        
        elif self.state == 'HALF_OPEN':
            self.logger.warning("Circuit Breaker: HALF_OPEN ‚Üí OPEN (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞)")
            self.state = 'OPEN'
            self.half_open_success_count = 0
    
    def can_execute(self) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"""
        if not self.enabled:
            return True
        
        if self.state == 'CLOSED':
            return True
        
        if self.state == 'HALF_OPEN':
            return True
        
        # state == 'OPEN'
        if self.last_failure_time:
            elapsed = (datetime.now() - self.last_failure_time).total_seconds()
            
            if elapsed >= self.recovery_timeout:
                self.logger.info(
                    f"Circuit Breaker: OPEN ‚Üí HALF_OPEN "
                    f"(–ø–∞—É–∑–∞ {self.recovery_timeout} —Å–µ–∫ –ø—Ä–æ—à–ª–∞)"
                )
                self.state = 'HALF_OPEN'
                self.half_open_success_count = 0
                return True
        
        return False
    
    def get_wait_time(self) -> Optional[float]:
        """–°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–µ—Å–ª–∏ OPEN)"""
        if self.state != 'OPEN' or not self.last_failure_time:
            return None
        
        elapsed = (datetime.now() - self.last_failure_time).total_seconds()
        remaining = self.recovery_timeout - elapsed
        
        return max(0, remaining)


class RetryStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è retry —Å –≥–∏–±–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    def __init__(self, config: RetryConfig, circuit_breaker: Optional[CircuitBreaker] = None):
        self.config = config
        self.circuit_breaker = circuit_breaker
        self.logger = get_logger('retry_strategy')
    
    def calculate_delay(self, attempt: int) -> float:
        """–†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π"""
        if self.config.backoff == 'linear':
            delay = self.config.initial_delay
        else:  # exponential
            delay = self.config.initial_delay * (self.config.backoff_multiplier ** (attempt - 1))
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        delay = min(delay, self.config.max_delay)
        
        # Jitter (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±20%)
        if self.config.jitter:
            jitter_range = delay * 0.2
            delay += random.uniform(-jitter_range, jitter_range)
        
        return max(0, delay)
    
    def is_retriable_exception(self, exc: Exception) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å"""
        exc_name = type(exc).__name__
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if exc_name in self.config.retriable_exceptions:
            return True
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ retriable –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        retriable_types = (
            asyncio.TimeoutError,
            aiohttp.ClientError,
            aiohttp.ServerDisconnectedError,
            aiohttp.ClientConnectionError,
            ConnectionError,
            RetryableError
        )
        
        return isinstance(exc, retriable_types)
    
    def is_retriable_status(self, status: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ HTTP —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å"""
        return status in self.config.retriable_status_codes
    
    async def execute_with_retry(self, 
                                func: Callable,
                                *args,
                                error_context: str = "",
                                **kwargs) -> Any:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å retry
        
        Args:
            func: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            error_context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "HTTP GET /api")
            *args, **kwargs: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è func
        
        Raises:
            NonRetriableError: –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç retry
            CircuitBreakerOpenError: –µ—Å–ª–∏ Circuit Breaker –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN
        """
        last_exception = None
        
        for attempt in range(1, self.config.max_attempts + 1):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Circuit Breaker
            if self.circuit_breaker and not self.circuit_breaker.can_execute():
                wait_time = self.circuit_breaker.get_wait_time()
                
                if wait_time and wait_time > 0:
                    self.logger.warning(
                        f"‚è∏Ô∏è Circuit Breaker OPEN, –∂–¥–µ–º {wait_time:.0f} —Å–µ–∫..."
                    )
                    await asyncio.sleep(wait_time)
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    if not self.circuit_breaker.can_execute():
                        raise CircuitBreakerOpenError(
                            f"Circuit Breaker –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN, —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                        )
                else:
                    raise CircuitBreakerOpenError(
                        f"Circuit Breaker –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN"
                    )
            
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                result = await func(*args, **kwargs)
                
                # –£—Å–ø–µ—Ö
                if self.circuit_breaker:
                    self.circuit_breaker.record_success()
                
                if attempt > 1:
                    self.logger.info(f"‚úÖ –£—Å–ø–µ—Ö –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}")
                
                return result
            
            except NonRetriableError:
                # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞–≤–µ—Ä—Ö
                if self.circuit_breaker:
                    self.circuit_breaker.record_success()  # –ù–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ failure
                raise
            
            except Exception as exc:
                last_exception = exc
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                if not self.is_retriable_exception(exc):
                    self.logger.error(f"‚ùå Non-retriable error: {type(exc).__name__}: {exc}")
                    raise NonRetriableError(f"{type(exc).__name__}: {exc}") from exc
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º failure
                if self.circuit_breaker:
                    self.circuit_breaker.record_failure()
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                if attempt >= self.config.max_attempts:
                    self.logger.error(
                        f"‚ùå –í—Å–µ {self.config.max_attempts} –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã"
                    )
                    raise RetryableError(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ {self.config.max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {exc}"
                    ) from exc
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                delay = self.calculate_delay(attempt)
                
                self.logger.warning(
                    f"‚ö†Ô∏è [{error_context}] {type(exc).__name__} "
                    f"(–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{self.config.max_attempts}), "
                    f"–ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫"
                )
                
                await asyncio.sleep(delay)
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ —Å—é–¥–∞ –¥–æ–π—Ç–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        raise RetryableError(f"Unexpected retry exhaustion") from last_exception