# collect_parser_code.py - –°–±–æ—Ä—â–∏–∫ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
"""
import sys
import os
from pathlib import Path
from datetime import datetime
import hashlib

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ—Ä—è–¥–∫–æ–º –∏–º–ø–æ—Ä—Ç–æ–≤
PROJECT_STRUCTURE = [
    # –ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ('parsers/court_parser/utils', ['__init__.py', 'logger.py', 'text_processor.py', 'validators.py']),
    ('parsers/court_parser/config', ['__init__.py', 'settings.py']),
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    ('parsers/court_parser/auth', ['__init__.py', 'authenticator.py']),
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    ('parsers/court_parser/database', ['__init__.py', 'models.py', 'db_manager.py']),
    
    # –ü–∞—Ä—Å–∏–Ω–≥
    ('parsers/court_parser/parsing', ['__init__.py', 'html_parser.py', 'data_extractor.py']),
    
    # –ü–æ–∏—Å–∫
    ('parsers/court_parser/search', ['__init__.py', 'form_handler.py', 'search_engine.py']),
    
    # –Ø–¥—Ä–æ
    ('parsers/court_parser/core', ['__init__.py', 'session.py', 'parser.py']),
    
    # –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
    ('parsers/court_parser', ['main.py']),
]

HEADER = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞ —Å—É–¥–∞
–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: {build_date}
–ê–≤—Ç–æ—Ä: Court Parser Team

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª.
–î–ª—è –∑–∞–ø—É—Å–∫–∞: python court_parser_unified.py

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
- –£—Ç–∏–ª–∏—Ç—ã (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞)
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- –ü–∞—Ä—Å–∏–Ω–≥ HTML
- –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
"""

# ============================================================================
# –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò
# ============================================================================
import os
import sys
import json
import time
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, List, Any

'''

MODULE_SEPARATOR = '''

# ============================================================================
# –ú–û–î–£–õ–¨: {module_name}
# ============================================================================
'''

FOOTER = '''

# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
'''


def read_file_content(filepath: Path) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        return ""
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return ""


def clean_content(content: str, filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    lines = content.split('\n')
    cleaned_lines = []
    
    for i, line in enumerate(lines):
        stripped = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º shebang –∏ encoding (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞)
        if i < 3 and (stripped.startswith('#!') or stripped.startswith('# -*- coding:')):
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞
        if any(x in line for x in [
            'from .', 'from ..', 
            'from auth import', 'from auth.', 
            'from config import', 'from config.',
            'from core import', 'from core.',
            'from database import', 'from database.',
            'from parsing import', 'from parsing.',
            'from search import', 'from search.',
            'from utils import', 'from utils.'
        ]):
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            cleaned_lines.append(f"# REMOVED IMPORT: {line}")
            continue
        
        # –î–ª—è __init__.py –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–π –∫–æ–¥
        if filename == '__init__.py' and not stripped:
            continue
            
        cleaned_lines.append(line)
    
    return '\n'.join(cleaned_lines)


def extract_imports(content: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    lines = content.split('\n')
    imports = []
    code = []
    in_docstring = False
    docstring_char = None
    skip_until_code = True
    
    for line in lines:
        stripped = line.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ docstring
        if '"""' in line or "'''" in line:
            skip_until_code = False
            if not in_docstring:
                in_docstring = True
                docstring_char = '"""' if '"""' in line else "'''"
                code.append(line)
                if line.count(docstring_char) >= 2:
                    in_docstring = False
            elif docstring_char in line:
                in_docstring = False
                code.append(line)
            else:
                code.append(line)
            continue
            
        if in_docstring:
            code.append(line)
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞
        if skip_until_code and (not stripped or stripped.startswith('#')):
            continue
            
        # –°–æ–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        if stripped.startswith('import ') or stripped.startswith('from '):
            skip_until_code = False
            # –¢–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            if not any(x in stripped for x in [
                'from .', 'from ..', 
                'from auth', 'from config', 'from core', 
                'from database', 'from parsing', 'from search', 'from utils'
            ]):
                imports.append(line)
        else:
            skip_until_code = False
            code.append(line)
    
    return '\n'.join(imports), '\n'.join(code)


def build_unified_file(output_file: str = 'court_parser_unified.py'):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    
    print("=" * 70)
    print("üî® –°–ë–û–†–ö–ê –ü–†–û–ï–ö–¢–ê COURT PARSER")
    print("=" * 70)
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}\n")
    
    base_path = Path('.')
    all_imports = set()
    all_code = []
    files_processed = 0
    files_not_found = 0
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for module_dir, files in PROJECT_STRUCTURE:
        module_path = base_path / module_dir
        
        print(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª—è: {module_dir}")
        
        for filename in files:
            filepath = module_path / filename
            
            if not filepath.exists():
                print(f"   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                files_not_found += 1
                continue
            
            print(f"   ‚úì {filename}")
            files_processed += 1
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = read_file_content(filepath)
            if not content:
                continue
            
            # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = clean_content(content, filename)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–¥
            imports, code = extract_imports(content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
            if imports:
                for imp in imports.split('\n'):
                    imp = imp.strip()
                    if imp and not imp.startswith('#'):
                        all_imports.add(imp)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º (–∫—Ä–æ–º–µ –ø—É—Å—Ç—ã—Ö __init__.py)
            code_stripped = code.strip()
            if code_stripped and not (filename == '__init__.py' and len(code_stripped) < 50):
                module_name = f"{module_dir}/{filename}"
                all_code.append(MODULE_SEPARATOR.format(module_name=module_name))
                all_code.append(code_stripped)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
    print(f"\n‚úçÔ∏è  –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {output_file}")
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            f.write(HEADER.format(build_date=datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            
            # –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã
            if all_imports:
                f.write('\n# –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏\n')
                f.write('\n'.join(sorted(all_imports)))
                f.write('\n')
            
            # –í–µ—Å—å –∫–æ–¥
            f.write('\n'.join(all_code))
            
            # –§—É—Ç–µ—Ä
            f.write(FOOTER)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        file_size = os.path.getsize(output_file)
        with open(output_file, 'r', encoding='utf-8') as f:
            lines_count = len(f.readlines())
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
        with open(output_file, 'rb') as f:
            file_hash = hashlib.sha256(f.read()).hexdigest()
        
        print(f"\n{'=' * 70}")
        print("‚úÖ –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"{'=' * 70}")
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_processed}")
        print(f"   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_not_found}")
        print(f"   üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {lines_count:,}")
        print(f"   üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {len(all_imports)}")
        print(f"   üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç ({file_size/1024:.2f} KB)")
        print(f"   üîê SHA-256: {file_hash[:32]}...")
        print(f"{'=' * 70}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
        return False


def create_requirements():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª requirements.txt"""
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt...")
    
    requirements = [
        "# Court Parser Dependencies",
        "# Generated: " + datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        "",
        "# Core dependencies",
        "requests>=2.31.0",
        "beautifulsoup4>=4.12.0",
        "lxml>=4.9.0",
        "",
        "# Database",
        "sqlalchemy>=2.0.0",
        "",
        "# Optional",
        "selenium>=4.15.0  # For JavaScript-heavy pages",
        "pandas>=2.0.0  # For data export",
    ]
    
    try:
        with open('requirements.txt', 'w', encoding='utf-8') as f:
            f.write('\n'.join(requirements))
        print("‚úÖ –°–æ–∑–¥–∞–Ω requirements.txt")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è requirements.txt: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    output_file = 'court_parser_unified.py'
    
    # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    success = build_unified_file(output_file)
    
    if success:
        # –°–æ–∑–¥–∞–Ω–∏–µ requirements
        create_requirements()
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª: {output_file}")
        print(f"üí° –ó–∞–ø—É—Å–∫: python {output_file}")
    else:
        print("\n‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1
    
    return 0


if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)