# test_auth_final.py
import asyncio
import aiohttp
import json
import ssl
from selectolax.parser import HTMLParser

def extract_auth_form_ids(html: str) -> dict:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            'form_base': 'j_idt82:auth',
            'xin_field': 'j_idt82:auth:xin',
            'password_field': 'j_idt82:auth:password',
            'submit_button': 'j_idt82:auth:j_idt89'
        }
    """
    parser = HTMLParser(html)
    ids = {}
    
    # 1. –ü–æ–∏—Å–∫ –ø–æ–ª—è –ò–ò–ù (input[type="email"])
    xin_input = parser.css_first('input[type="email"]')
    if xin_input:
        xin_name = xin_input.attributes.get('name', '') if xin_input.attributes else ''
        xin_id = xin_input.attributes.get('id', '') if xin_input.attributes else ''
        
        ids['xin_field'] = xin_name or xin_id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π ID —Ñ–æ—Ä–º—ã –∏–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä: 'j_idt82:auth:xin' ‚Üí 'j_idt82:auth'
        if ':' in ids['xin_field']:
            parts = ids['xin_field'].split(':')
            ids['form_base'] = ':'.join(parts[:-1])
    
    # 2. –ü–æ–∏—Å–∫ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è (input[type="password"])
    password_input = parser.css_first('input[type="password"]')
    if password_input:
        password_name = password_input.attributes.get('name', '') if password_input.attributes else ''
        password_id = password_input.attributes.get('id', '') if password_input.attributes else ''
        ids['password_field'] = password_name or password_id
    
    # 3. –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
    # –ú–µ—Ç–æ–¥ 1: –ü–æ value="–í–æ–π—Ç–∏" –∏ type="submit"
    submit_buttons = parser.css('input[type="submit"]')
    
    for button in submit_buttons:
        if not button.attributes:
            continue
            
        button_value = button.attributes.get('value', '')
        if button_value is None:
            button_value = ''
        button_value = button_value.strip()
        
        button_id = button.attributes.get('id', '') or ''
        button_name = button.attributes.get('name', '') or ''
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        if button_value.lower() in ['–≤–æ–π—Ç–∏', 'login', '–∫—ñ—Ä—É']:
            ids['submit_button'] = button_name or button_id
            ids['submit_button_value'] = button_value
            break
    
    # –ú–µ—Ç–æ–¥ 2: –ü–æ –∫–ª–∞—Å—Å—É button-primary (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
    if 'submit_button' not in ids:
        primary_buttons = parser.css('.button-primary[type="submit"]')
        if primary_buttons:
            button = primary_buttons[0]
            if button.attributes:
                button_id = button.attributes.get('id', '') or ''
                button_name = button.attributes.get('name', '') or ''
                ids['submit_button'] = button_name or button_id
    
    # –ú–µ—Ç–æ–¥ 3: –ü–æ onclick —Å RichFaces.ajax (–∑–∞–ø–∞—Å–Ω–æ–π)
    if 'submit_button' not in ids:
        ajax_elements = parser.css('[onclick*="RichFaces.ajax"]')
        for elem in ajax_elements:
            if not elem.attributes:
                continue
                
            onclick = elem.attributes.get('onclick', '') or ''
            elem_id = elem.attributes.get('id', '') or ''
            elem_name = elem.attributes.get('name', '') or ''
            elem_type = elem.attributes.get('type', '') or ''
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ submit –∫–Ω–æ–ø–∫–∞ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if 'auth' in (elem_id or elem_name) and elem_type == 'submit':
                ids['submit_button'] = elem_name or elem_id
                break
    
    return ids


async def test_auth():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º config
    with open('parsers/court_parser/config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    base_url = config['base_url']
    login = config['auth']['login']
    password = config['auth']['password']
    user_name = config['auth']['user_name']
    
    print("=" * 90)
    print("–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò office.sud.kz")
    print("=" * 90)
    print(f"üåê URL: {base_url}")
    print(f"üë§ –ò–ò–ù: {login}")
    print(f"üîë –ü–∞—Ä–æ–ª—å: {'*' * len(password)}")
    print(f"üìõ –û–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è: {user_name}")
    print("=" * 90)
    
    # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    connector = aiohttp.TCPConnector(ssl=ssl_context)
    
    async with aiohttp.ClientSession(connector=connector) as session:
        
        # ============================================================
        # –®–ê–ì 1: –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
        # ============================================================
        print("\n" + "‚îÄ" * 90)
        print("üìÑ –®–ê–ì 1/5: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("‚îÄ" * 90)
        
        async with session.get(f"{base_url}/") as resp:
            html = await resp.text()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open('debug_step1_main.html', 'w', encoding='utf-8') as f:
                f.write(html)
            
            # ViewState
            parser = HTMLParser(html)
            viewstate_input = parser.css_first('input[name="javax.faces.ViewState"]')
            viewstate = viewstate_input.attributes.get('value') if viewstate_input and viewstate_input.attributes else None
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {resp.status}")
            print(f"‚úÖ –†–∞–∑–º–µ—Ä: {len(html):,} –±–∞–π—Ç")
            print(f"‚úÖ ViewState: {viewstate[:60] if viewstate else 'NOT FOUND'}...")
        
        await asyncio.sleep(1)
        
        # ============================================================
        # –®–ê–ì 2: –°–ú–ï–ù–ê –Ø–ó–´–ö–ê
        # ============================================================
        print("\n" + "‚îÄ" * 90)
        print("üåç –®–ê–ì 2/5: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
        print("‚îÄ" * 90)
        
        data = {
            'f_l_temp': 'f_l_temp',
            'javax.faces.ViewState': viewstate,
            'javax.faces.source': 'f_l_temp:js_temp_1',
            'javax.faces.partial.execute': 'f_l_temp:js_temp_1 @component',
            'javax.faces.partial.render': '@component',
            'param1': f'{base_url}/',
            'org.richfaces.ajax.component': 'f_l_temp:js_temp_1',
            'f_l_temp:js_temp_1': 'f_l_temp:js_temp_1',
            'rfExt': 'null',
            'AJAX:EVENTS_COUNT': '1',
            'javax.faces.partial.ajax': 'true'
        }
        
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
            'Faces-Request': 'partial/ajax',
            'X-Requested-With': 'XMLHttpRequest'
        }
        
        async with session.post(f"{base_url}/index.xhtml", data=data, headers=headers) as resp:
            response_text = await resp.text()
            
            with open('debug_step2_lang.xml', 'w', encoding='utf-8') as f:
                f.write(response_text)
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {resp.status}")
            print(f"‚úÖ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response_text):,} –±–∞–π—Ç")
        
        await asyncio.sleep(1)
        
        # ============================================================
        # –®–ê–ì 3: –ü–û–õ–£–ß–ï–ù–ò–ï –§–û–†–ú–´ –° –†–£–°–°–ö–ò–ú –ò–ù–¢–ï–†–§–ï–ô–°–û–ú
        # ============================================================
        print("\n" + "‚îÄ" * 90)
        print("üìã –®–ê–ì 3/5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print("‚îÄ" * 90)
        
        async with session.get(f"{base_url}/index.xhtml") as resp:
            html = await resp.text()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open('debug_step3_form.html', 'w', encoding='utf-8') as f:
                f.write(html)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            auth_ids = extract_auth_form_ids(html)
            
            # –ù–æ–≤—ã–π ViewState
            parser = HTMLParser(html)
            viewstate_input = parser.css_first('input[name="javax.faces.ViewState"]')
            viewstate = viewstate_input.attributes.get('value') if viewstate_input and viewstate_input.attributes else viewstate
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {resp.status}")
            print(f"‚úÖ –†–∞–∑–º–µ—Ä: {len(html):,} –±–∞–π—Ç")
            print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π ViewState: {viewstate[:60]}...")
            print(f"\nüìù –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã:")
            
            if auth_ids:
                for key, value in auth_ids.items():
                    print(f"   ‚Ä¢ {key:20s}: {value}")
            else:
                print("   ‚ö†Ô∏è  –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã
        required_fields = ['form_base', 'xin_field', 'submit_button']
        missing = [f for f in required_fields if f not in auth_ids]
        
        if missing:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è: {', '.join(missing)}")
            print(f"\nüîç –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è...")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –≤ HTML
            parser = HTMLParser(html)
            
            # –ò—â–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã
            print("\nüìã –í—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
            inputs = parser.css('input')
            for inp in inputs[:10]:  # –ü–µ—Ä–≤—ã–µ 10
                if inp.attributes:
                    inp_type = inp.attributes.get('type', 'N/A')
                    inp_id = inp.attributes.get('id', 'N/A')
                    inp_name = inp.attributes.get('name', 'N/A')
                    inp_value = inp.attributes.get('value', 'N/A')
                    print(f"   type={inp_type:10s} id={inp_id:30s} name={inp_name:30s} value={inp_value[:20]}")
            
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        form_base = auth_ids['form_base']
        submit_button = auth_ids['submit_button']
        
        await asyncio.sleep(1)
        
        # ============================================================
        # –®–ê–ì 4: –û–¢–ü–†–ê–í–ö–ê –õ–û–ì–ò–ù–ê –ò –ü–ê–†–û–õ–Ø
        # ============================================================
        print("\n" + "‚îÄ" * 90)
        print("üîê –®–ê–ì 4/5: –û—Ç–ø—Ä–∞–≤–∫–∞ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚îÄ" * 90)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û–ß–ù–û –∫–∞–∫ –≤ DevTools
        auth_data = {
            form_base: form_base,
            f'{form_base}:xin': login,
            f'{form_base}:password': password,
            'javax.faces.ViewState': viewstate,
            'javax.faces.source': submit_button,
            'javax.faces.partial.event': 'click',
            'javax.faces.partial.execute': f'{submit_button} @component',
            'javax.faces.partial.render': '@component',
            'org.richfaces.ajax.component': submit_button,
            submit_button: submit_button,
            'rfExt': 'null',
            'AJAX:EVENTS_COUNT': '1',
            'javax.faces.partial.ajax': 'true'
        }
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print("‚îÄ" * 90)
        for key, value in auth_data.items():
            if 'password' in key.lower():
                display_value = '‚Ä¢' * len(value)
            elif key == 'javax.faces.ViewState':
                display_value = f"{value[:40]}... ({len(value)} —Å–∏–º–≤–æ–ª–æ–≤)"
            else:
                display_value = value
            
            print(f"   {key:40s} = {display_value}")
        print("‚îÄ" * 90)
        
        async with session.post(f"{base_url}/index.xhtml", 
                              data=auth_data, 
                              headers=headers) as resp:
            response_text = await resp.text()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open('debug_step4_auth.xml', 'w', encoding='utf-8') as f:
                f.write(response_text)
            
            print(f"\n‚úÖ –°—Ç–∞—Ç—É—Å: {resp.status}")
            print(f"‚úÖ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response_text):,} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
            if 'error' in response_text.lower() or '–æ—à–∏–±–∫–∞' in response_text.lower():
                print(f"‚ö†Ô∏è  –í –æ—Ç–≤–µ—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏!")
                print(f"   –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:")
                print(f"   {response_text[:500]}")
        
        await asyncio.sleep(1)
        
        # ============================================================
        # –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
        # ============================================================
        print("\n" + "‚îÄ" * 90)
        print("‚úîÔ∏è  –®–ê–ì 5/5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print("‚îÄ" * 90)
        
        check_url = f"{base_url}/form/proceedings/services.xhtml"
        
        async with session.get(check_url) as resp:
            html = await resp.text()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open('debug_step5_check.html', 'w', encoding='utf-8') as f:
                f.write(html)
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {resp.status}")
            print(f"‚úÖ –†–∞–∑–º–µ—Ä: {len(html):,} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            checks = {
                'üîπ profile-context-menu': 'profile-context-menu' in html,
                f'üîπ –ò–º—è "{user_name}"': user_name in html,
                'üîπ –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏"': '–í—ã–π—Ç–∏' in html,
                'üîπ –§—É–Ω–∫—Ü–∏—è logout()': 'logout()' in html,
                'üîπ –°—Å—ã–ª–∫–∞ userInfo.xhtml': 'userInfo.xhtml' in html,
                'üîπ –¢–µ–∫—Å—Ç "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' in html,
                'üîπ –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã > 30 KB': len(html) > 30000
            }
            
            print("\n" + "‚îÄ" * 90)
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
            print("‚îÄ" * 90)
            
            for check_name, result in checks.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"   {status} {check_name}")
            
            passed = sum(checks.values())
            total = len(checks)
            percentage = (passed / total) * 100
            
            print("‚îÄ" * 90)
            print(f"üìà –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total} ({percentage:.1f}%)")
            print("‚îÄ" * 90)
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
            if passed >= 5:
                print("\n" + "=" * 90)
                print("üéâüéâüéâ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! üéâüéâüéâ")
                print("=" * 90)
                print("\n‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                print("‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∫–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä!")
                return True
            elif passed >= 3:
                print("\n" + "=" * 90)
                print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
                print("=" * 90)
                print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–æ –±–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print("\n" + "=" * 90)
                print("‚ùå‚ùå‚ùå –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê ‚ùå‚ùå‚ùå")
                print("=" * 90)
                print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã:")
                print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª debug_step5_check.html")
                print(f"   ‚Ä¢ –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
                print("   " + "‚îÄ" * 86)
                print(f"   {html[:1000]}")
                print("   " + "‚îÄ" * 86)
                return False


if __name__ == "__main__":
    result = asyncio.run(test_auth())
    
    if result:
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø–µ—Ä–µ–Ω–æ—Å –∫–æ–¥–∞ –≤ authenticator.py")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ debug —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã")